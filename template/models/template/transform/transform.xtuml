-- BP 7.1.6 content: Package syschar: 3 persistence-version: 7.1.6

INSERT INTO EP_PKG
	VALUES ("0f65277e-71ba-472a-ad12-048000976d40",
	"9bad5865-c62d-406a-afba-4ffdfa887a1d",
	"9bad5865-c62d-406a-afba-4ffdfa887a1d",
	'transform',
	'',
	0);
INSERT INTO GD_MD
	VALUES ("a286abed-8056-4e9b-8cf7-c15ab19d2f84",
	112,
	"0f65277e-71ba-472a-ad12-048000976d40",
	108,
	0,
	0,
	1,
	1,
	1,
	12,
	1,
	0,
	0,
	0,
	0,
	0,
	'',
	'template::transform');
INSERT INTO DIM_DIA
	VALUES ("a286abed-8056-4e9b-8cf7-c15ab19d2f84",
	'',
	1.000000,
	0.000000,
	0.000000,
	"00000000-0000-0000-0000-000000000000");
INSERT INTO S_SYNC
	VALUES ("ed99ed22-7ecf-40c1-9e95-aab5538ae4f4",
	"00000000-0000-0000-0000-000000000000",
	'transformTemplateRegistries',
	'',
	'select many comp_defs from instances of ComponentDefinition;
for each comp_def in comp_defs
  ::transformTemplateRegistry( comp_def:comp_def );
end for;',
	"ba5eda7a-def5-0000-0000-000000000000",
	1,
	'',
	0);
INSERT INTO PE_PE
	VALUES ("ed99ed22-7ecf-40c1-9e95-aab5538ae4f4",
	1,
	"0f65277e-71ba-472a-ad12-048000976d40",
	"00000000-0000-0000-0000-000000000000",
	1);
INSERT INTO S_SYNC
	VALUES ("84b152bf-ae5a-4d05-ba55-2482f90eeebe",
	"00000000-0000-0000-0000-000000000000",
	'transformTemplate',
	'',
	'filename = param.filename;
registry = param.registry;
comp_def = param.comp_def;
select one registry_file related by registry->GeneralFile[R3051]->File[R401];

// create the template instance
create object instance temp of Z_Template;
relate temp to registry across R3052;

// create the invocable instance
create object instance invocable of InvocableObject;
invocable.name = filename;
invocable.parent_name = registry.name;
invocable.parent_package = registry.package;
create object instance generic_invocable of GenericInvocable;
relate generic_invocable to invocable across R427;
invocable.oal = "";

relate temp to generic_invocable across R3053;
temp.comp_name = registry.comp_name;

// link void type
select any void_type from instances of Type where ( selected.name == "void" and selected.package == "" );
relate void_type to invocable across R428;

// transform the body
select any body from instances of Y_Body where ( selected.filename == temp.name );
if ( not_empty body )
  ::transformRSLBody( body:body, invocable:invocable );
else
  // TODO bad
end if;

// create import block
select one comp_file related by comp_def->File[R401];
::addFileToImports( file:registry_file, file_to_import:comp_file, type:ImportType::IMPL );
::addStringToImports( file:registry_file, s:"io.ciera.summit.exceptions.XtumlException", type:ImportType::IMPL );
::addStringToImports( file:registry_file, s:"io.ciera.template.util.Template", type:ImportType::IMPL );',
	"ba5eda7a-def5-0000-0000-000000000000",
	1,
	'',
	0);
INSERT INTO S_SPARM
	VALUES ("c4e9070f-fa44-4b8d-8e82-e01ab932200f",
	"84b152bf-ae5a-4d05-ba55-2482f90eeebe",
	'registry',
	"c578e2f3-3a0f-4b18-8c5e-321105a85089",
	0,
	'',
	"130ffd23-f5be-439c-805b-568a65cc8b95",
	'');
INSERT INTO S_DT_PROXY
	VALUES ("c578e2f3-3a0f-4b18-8c5e-321105a85089",
	"00000000-0000-0000-0000-000000000000",
	'inst_ref<Template Registry>',
	'',
	'',
	'../templating/templating.xtuml');
INSERT INTO S_SPARM
	VALUES ("e31ecbd5-dd55-48eb-82c0-74e0b950fc46",
	"84b152bf-ae5a-4d05-ba55-2482f90eeebe",
	'comp_def',
	"1fef1559-c5b6-4eb7-a9c4-8b126b9b51a0",
	0,
	'',
	"c4e9070f-fa44-4b8d-8e82-e01ab932200f",
	'');
INSERT INTO S_DT_PROXY
	VALUES ("1fef1559-c5b6-4eb7-a9c4-8b126b9b51a0",
	"00000000-0000-0000-0000-000000000000",
	'inst_ref<Component Definition>',
	'',
	'',
	'../../../../ciera/models/ciera/ciera/architecture/component/component.xtuml');
INSERT INTO S_SPARM
	VALUES ("130ffd23-f5be-439c-805b-568a65cc8b95",
	"84b152bf-ae5a-4d05-ba55-2482f90eeebe",
	'filename',
	"ba5eda7a-def5-0000-0000-000000000004",
	0,
	'',
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO PE_PE
	VALUES ("84b152bf-ae5a-4d05-ba55-2482f90eeebe",
	1,
	"0f65277e-71ba-472a-ad12-048000976d40",
	"00000000-0000-0000-0000-000000000000",
	1);
INSERT INTO S_SYNC
	VALUES ("ef09830e-f240-454f-9a09-c54ae1f5ee5b",
	"00000000-0000-0000-0000-000000000000",
	'transformTemplateRegistry',
	'',
	'comp_def = param.comp_def;
select one comp_def_file related by comp_def->File[R401];

// create the file
create object instance file of File;
file.name = comp_def.name + "TemplateRegistry";
file.path = comp_def_file.path;
file.package = ::pathToPackage( path:file.path );
file.extension = ".java";
file.exclude = false;

// create the general file
create object instance general_file of GeneralFile;
relate general_file to file across R401;

// create the template registry instance
create object instance registry of Z_TemplateRegistry;
relate registry to general_file across R3051;
registry.comp_name = comp_def.name;

// create a template for each reference in the component
select many invocs from instances of InvocableObject where false;
select many func_invocs related by comp_def->Function[R405]->InvocableObject[R427];
select many msg_invocs related by comp_def->Port[R417]->PortMessage[R420]->InvocableObject[R427];
invocs = func_invocs | msg_invocs;
select many op_invocs related by comp_def->Class[R408]->Operation[R416]->InvocableObject[R427];
invocs = invocs | op_invocs;
select many attr_invocs related by comp_def->Class[R408]->Attribute[R410]->AttributeAccessor[R4510]->AttributeDerivation[R441]->InvocableObject[R427];
invocs = invocs | attr_invocs;
select many util_invocs related by comp_def->Utility[R4558]->UtilityFunction[R4559]->InvocableObject[R427];
invocs = invocs | util_invocs;
select many template_includes related by invocs->CodeBlock[R4000]->Statement[R450]->ExpressionAsStatement[R451]->Expression[R476]->Invocation[R776]
  where ( selected.invoked_name == "include" and selected.invoked_parent_name == "TEMP" and selected.invoked_parent_package == "io.ciera.template.util" );
for each template_include in template_includes
  select any filename_string related by template_include->ActualParameter[R793]->Expression[R794]->Literal[R776];
  if ( not_empty filename_string )
    select any existing_template related by registry->Z_Template[R3052] where ( selected.name == filename_string.value );
    if ( empty existing_template )
      ::transformTemplate( registry:registry, comp_def:comp_def, filename:filename_string.value );
    end if;
  else
    // TODO bad
  end if;
end for;

// create import block
::addFileToImports( file:file, file_to_import:comp_def_file, type:ImportType::IMPL );
::addStringToImports( file:file, s:"io.ciera.template.util.ITemplate", type:ImportType::IMPL );
::addStringToImports( file:file, s:"io.ciera.template.util.ITemplateRegistry", type:ImportType::IMPL );',
	"ba5eda7a-def5-0000-0000-000000000000",
	1,
	'',
	0);
INSERT INTO S_SPARM
	VALUES ("2079a875-53b2-4adb-97b9-61aa2457d33e",
	"ef09830e-f240-454f-9a09-c54ae1f5ee5b",
	'comp_def',
	"1fef1559-c5b6-4eb7-a9c4-8b126b9b51a0",
	0,
	'',
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO PE_PE
	VALUES ("ef09830e-f240-454f-9a09-c54ae1f5ee5b",
	1,
	"0f65277e-71ba-472a-ad12-048000976d40",
	"00000000-0000-0000-0000-000000000000",
	1);
INSERT INTO S_SYNC
	VALUES ("25eaf350-9fa7-4771-b222-f8cabc32148c",
	"00000000-0000-0000-0000-000000000000",
	'transformRSLBody',
	'',
	'body = param.body;
invocable = param.invocable;

// create code block
create object instance block of CodeBlock;
block.top_level = true;
block.tab_depth = 4;
relate block to invocable across R4000;
block.block_number = "1";

// transform each line
current_id = -1;
done = false;
select many lines related by body->Y_Line[R3054];
while not done
  // select next line to process
  select any current_line from instances of Y_Line where false;
  for each line in lines
    if ( ( empty current_line or line.node_id < current_line.node_id ) and ( line.node_id > current_id ) )
      current_line = line;
    end if;
  end for;
  // process current line
  if ( not_empty current_line )
    block = ::transformRSLLine( line:current_line, block:block );
    current_id = current_line.node_id;
  else
    done = true;
  end if;
end while;',
	"ba5eda7a-def5-0000-0000-000000000000",
	1,
	'',
	0);
INSERT INTO S_SPARM
	VALUES ("b33835a5-eaa5-4192-97b8-15e8ed8667dc",
	"25eaf350-9fa7-4771-b222-f8cabc32148c",
	'body',
	"0566c21d-6680-412f-b8e1-d74f3509f680",
	0,
	'',
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO S_DT_PROXY
	VALUES ("0566c21d-6680-412f-b8e1-d74f3509f680",
	"00000000-0000-0000-0000-000000000000",
	'inst_ref<Body>',
	'',
	'',
	'../RSL/RSL.xtuml');
INSERT INTO S_SPARM
	VALUES ("aff8aa34-7d0e-459b-a66e-d993aaf61ced",
	"25eaf350-9fa7-4771-b222-f8cabc32148c",
	'invocable',
	"30c7a5ba-c6d9-44fd-8e61-f22cde8fdc41",
	0,
	'',
	"b33835a5-eaa5-4192-97b8-15e8ed8667dc",
	'');
INSERT INTO S_DT_PROXY
	VALUES ("30c7a5ba-c6d9-44fd-8e61-f22cde8fdc41",
	"00000000-0000-0000-0000-000000000000",
	'inst_ref<Invocable Object>',
	'',
	'',
	'../../../../ciera/models/ciera/ciera/architecture/invocable/invocable.xtuml');
INSERT INTO PE_PE
	VALUES ("25eaf350-9fa7-4771-b222-f8cabc32148c",
	1,
	"0f65277e-71ba-472a-ad12-048000976d40",
	"00000000-0000-0000-0000-000000000000",
	1);
INSERT INTO S_SYNC
	VALUES ("839b40bd-7fa6-489c-abca-aa0d5fd2bf8a",
	"00000000-0000-0000-0000-000000000000",
	'transformRSLLine',
	'',
	'line = param.line;
block = param.block;

select one buffer related by line->Y_Buffer[R3055];
if ( not_empty buffer )
  // transform each buffer element
  current_id = -1;
  done = false;
  select many buffer_elements related by buffer->Y_BufferElement[R3056];
  while not done
    // select next buffer element to process
    select any current_buffer_element from instances of Y_BufferElement where false;
    for each buffer_element in buffer_elements
      if ( ( empty current_buffer_element or buffer_element.node_id < current_buffer_element.node_id ) and ( buffer_element.node_id > current_id ) )
        current_buffer_element = buffer_element;
      end if;
    end for;
    // process current buffer element
    if ( not_empty current_buffer_element )
      select one blob related by current_buffer_element->Y_Blob[R3057];
      if ( not_empty blob )
        blob_string = blob.BLOB;
        select any next_buffer_element related by buffer->Y_BufferElement[R3056] where ( selected.node_id > current_buffer_element.node_id );
        if ( empty next_buffer_element )  // if this blob is the last element in the buffer line, handle line break special cases
          if ( "\\\\\\" == STR::substr( s:blob_string, begin:STR::strlen( s:blob_string ) - 3, end:-1 ) )  // three slashes = literal slash, no newline
            blob_string = STR::substr( s:blob_string, begin:0, end:STR::strlen( s:blob_string ) - 3 ) + "\\\\";
          elif ( "\\\\" == STR::substr( s:blob_string, begin:STR::strlen( s:blob_string ) - 2, end:-1 ) )  // two slashes = literal slash, with newline
            blob_string = STR::substr( s:blob_string, begin:0, end:STR::strlen( s:blob_string ) - 2 ) + "\\\\\\" + "n";
          elif ( "\\" == STR::substr( s:blob_string, begin:STR::strlen( s:blob_string ) - 1, end:-1 ) )    // one slash = no literal slash, no newline
            blob_string = STR::substr( s:blob_string, begin:0, end:STR::strlen( s:blob_string ) - 1 );
          else                                                                                             // no slashes = no literal slash, with newline
            blob_string = blob_string + "\\" + "n";
          end if;
        end if;
        ::templateAppendString( block:block, str:blob_string );
      else
      select one sub_var related by current_buffer_element->Y_SubstitutionVar[R3057];
      if ( not_empty sub_var )
        // TODO
      end if; end if;
      current_id = current_buffer_element.node_id;
    else
      done = true;
    end if;
  end while;
  
else
select one if_smt related by line->Y_IfStatement[R3055];
if ( not_empty if_smt )
  // TODO
  
else
select one elif_smt related by line->Y_ElifStatement[R3055];
if ( not_empty elif_smt )
  // TODO
  
else
select one else_smt related by line->Y_ElseStatement[R3055];
if ( not_empty else_smt )
  // TODO
  
else
select one endif_smt related by line->Y_EndIfStatement[R3055];
if ( not_empty endif_smt )
  // TODO

end if; end if; end if; end if; end if;

return block;',
	"e2eb4f67-ca2b-42ab-accf-5a2b475f8933",
	1,
	'',
	0);
INSERT INTO S_SPARM
	VALUES ("a292877f-686d-4fe6-8a85-fab5dd86a10f",
	"839b40bd-7fa6-489c-abca-aa0d5fd2bf8a",
	'line',
	"ddad7e06-add4-41df-bf00-ef51cfb2f6de",
	0,
	'',
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO S_DT_PROXY
	VALUES ("ddad7e06-add4-41df-bf00-ef51cfb2f6de",
	"00000000-0000-0000-0000-000000000000",
	'inst_ref<Line>',
	'',
	'',
	'../RSL/RSL.xtuml');
INSERT INTO S_SPARM
	VALUES ("3220da9d-0552-4bf7-93dd-7f8b9ee056a3",
	"839b40bd-7fa6-489c-abca-aa0d5fd2bf8a",
	'block',
	"e2eb4f67-ca2b-42ab-accf-5a2b475f8933",
	0,
	'',
	"a292877f-686d-4fe6-8a85-fab5dd86a10f",
	'');
INSERT INTO S_DT_PROXY
	VALUES ("e2eb4f67-ca2b-42ab-accf-5a2b475f8933",
	"00000000-0000-0000-0000-000000000000",
	'inst_ref<Code Block>',
	'',
	'',
	'../../../../ciera/models/ciera/ciera/architecture/invocable/invocable.xtuml');
INSERT INTO PE_PE
	VALUES ("839b40bd-7fa6-489c-abca-aa0d5fd2bf8a",
	1,
	"0f65277e-71ba-472a-ad12-048000976d40",
	"00000000-0000-0000-0000-000000000000",
	1);
INSERT INTO S_SYNC
	VALUES ("d9b12366-1a10-402c-971a-9370b6b2599f",
	"00000000-0000-0000-0000-000000000000",
	'resolveTemplateHooks',
	'',
	'select many affected_files from instances of File where false;
select many invocables from instances of InvocableObject;
for each invocable in invocables
  select one generic_invoc related by invocable->GenericInvocable[R427];
  if ( empty generic_invoc )
    select any template_invocation related by invocable->CodeBlock[R4000]->Statement[R450]->Expression[R775]->Invocation[R776] where
      ( "TEMP" == selected.invoked_parent_name and "io.ciera.template.util" == selected.invoked_parent_package and
      ( "append" == selected.invoked_name or
        "body" == selected.invoked_name or
        "clear" == selected.invoked_name or
        "emit" == selected.invoked_name or
        "include" == selected.invoked_name ) );
    if ( not_empty template_invocation ) // for bodies which invoke the template utility, add statements to handle the buffer stack
      select any top_block related by invocable->CodeBlock[R4000] where ( selected.top_level );
      indent = ::getIndent( tab_depth:top_block.tab_depth + 1 );
      top_block.prefix = top_block.prefix + indent + "context().TEMP().pushBuffer();\n";
      top_block.suffix = top_block.suffix + indent + "context().TEMP().popBuffer();\n";
      // add to the affected files list
      file = ::getFileForInvocable( invocable:invocable );
      affected_files = affected_files | file;
    end if;
  end if;
end for;

// re-render affected files
for each file in affected_files
  if ( not file.exclude )
    LOG::LogInfo( message:"  " + file.package + "." + file.name + file.extension + " REPLACED" );
    file.render();
  end if;
end for;',
	"ba5eda7a-def5-0000-0000-000000000000",
	1,
	'',
	0);
INSERT INTO PE_PE
	VALUES ("d9b12366-1a10-402c-971a-9370b6b2599f",
	1,
	"0f65277e-71ba-472a-ad12-048000976d40",
	"00000000-0000-0000-0000-000000000000",
	1);
INSERT INTO S_SYNC
	VALUES ("44750a9b-7eff-4709-8e36-a05f7ccb49c5",
	"00000000-0000-0000-0000-000000000000",
	'templateAppendString',
	'',
	'block = param.block;

// get last statement in block
select any prev_smt related by block->Statement[R450];
select one next_smt related by prev_smt->Statement[R477.''executes before''];
while ( not_empty next_smt )
  prev_smt = next_smt;
  select one next_smt related by prev_smt->Statement[R477.''executes before''];
end while;

// create a statement
create object instance smt of Statement;
relate smt to block across R450;
if ( not_empty prev_smt )
  smt.statement_number = STR::itoa( i:STR::atoi( s:prev_smt.statement_number ) + 1 );
  relate smt to prev_smt across R477.''executes after'';
else
  smt.statement_number = "1";
end if;
smt.oal = "";

// add XtumlString to the imports
select one registry_file related by block->InvocableObject[R4000]->GenericInvocable[R427]->Z_Template[R3053]->Z_TemplateRegistry[R3052]->GeneralFile[R3051]->File[R401];
::addStringToImports( file:registry_file, s:"io.ciera.summit.types.XtumlString", type:ImportType::IMPL );

// create an invocation to TEMP::append
select any utility from instances of Utility where ( "TEMP" == selected.name and "io.ciera.template.util" == selected.package );
if ( not_empty utility )
  select any util_func related by utility->UtilityFunction[R4559] where ( selected.name == "append" );
  select one invocable related by util_func->InvocableObject[R427];
  if ( not_empty invocable )
    // create expression as statement
    create object instance eas of ExpressionAsStatement;
    relate eas to smt across R451;
    // create main expression
    create object instance expr of Expression;
    relate expr to smt across R775;
    expr.expression_number = "1";
    select any void_type from instances of Type where ( "void" == selected.name and "" == selected.package );
    if ( not_empty void_type )
      relate void_type to expr across R795;
    else
      // TODO bad
    end if;
    // create invocation
    create object instance invoc of Invocation;
    relate invoc to expr across R776;
    relate invoc to invocable across R792;
    // relate expression to expression as statement
    relate eas to expr across R476;
    // create named reference expression
    create object instance expr2 of Expression;
    relate expr2 to smt across R775;
    expr2.expression_number = "1.1";
    select any void_type from instances of Type where ( "void" == selected.name and "" == selected.package );
    if ( not_empty void_type )
      relate void_type to expr2 across R795;
    else
      // TODO bad
    end if;
    // create named reference
    create object instance named_ref of NamedReference;
    relate named_ref to expr2 across R776;
    relate expr2 to invoc across R798;
    named_ref.name = "context()." + utility.name + "()";
    // transform actual parameter
    create object instance expr3 of Expression;
    relate expr3 to smt across R775;
    expr3.expression_number = "1.2";
    select any string_type from instances of Type where ( "XtumlString" == selected.name and "io.ciera.summit.types" == selected.package );
    if ( not_empty string_type )
      relate string_type to expr3 across R795;
    else
      // TODO bad
    end if;
    create object instance lit of Literal;
    relate lit to expr3 across R776;
    lit.value = param.str;
    create object instance act_parm of ActualParameter;
    relate act_parm to expr3 across R794;
    select any parm related by invocable->FormalParameter[R429];
    relate invoc to parm across R793 using act_parm;
  else
    // TODO bad
  end if;
else
  // TODO bad
end if;',
	"ba5eda7a-def5-0000-0000-000000000000",
	1,
	'',
	0);
INSERT INTO S_SPARM
	VALUES ("b57fba2a-3c39-4ade-bd7a-772605067f5c",
	"44750a9b-7eff-4709-8e36-a05f7ccb49c5",
	'block',
	"e2eb4f67-ca2b-42ab-accf-5a2b475f8933",
	0,
	'',
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO S_SPARM
	VALUES ("3b3d7f37-6700-43e8-be85-92ed03df24a1",
	"44750a9b-7eff-4709-8e36-a05f7ccb49c5",
	'str',
	"ba5eda7a-def5-0000-0000-000000000004",
	0,
	'',
	"b57fba2a-3c39-4ade-bd7a-772605067f5c",
	'');
INSERT INTO PE_PE
	VALUES ("44750a9b-7eff-4709-8e36-a05f7ccb49c5",
	1,
	"0f65277e-71ba-472a-ad12-048000976d40",
	"00000000-0000-0000-0000-000000000000",
	1);
INSERT INTO PE_PE
	VALUES ("0f65277e-71ba-472a-ad12-048000976d40",
	1,
	"00000000-0000-0000-0000-000000000000",
	"00000000-0000-0000-0000-000000000000",
	7);
INSERT INTO S_SYS_PROXY
	VALUES ("9bad5865-c62d-406a-afba-4ffdfa887a1d",
	'template',
	1,
	'../template.xtuml');
