-- BP 7.1.6 content: Package syschar: 3 persistence-version: 7.1.6

INSERT INTO EP_PKG
	VALUES ("c7e18228-e420-4b1e-9c87-113a222b7b0b",
	"00000000-0000-0000-0000-000000000000",
	"aa743d3c-66dc-49df-a19a-ffbadf9c9d1b",
	'expression',
	'',
	0);
INSERT INTO GD_MD
	VALUES ("b3d6fae4-b994-426d-9b0c-5fbc26572789",
	112,
	"c7e18228-e420-4b1e-9c87-113a222b7b0b",
	108,
	0,
	0,
	1,
	1,
	1,
	12,
	1,
	0,
	0,
	0,
	0,
	0,
	'4.1.17',
	'io.ciera.tool.core::transform::expression');
INSERT INTO DIM_DIA
	VALUES ("b3d6fae4-b994-426d-9b0c-5fbc26572789",
	'',
	1.000000,
	0.000000,
	0.000000,
	"00000000-0000-0000-0000-000000000000");
INSERT INTO S_SYNC
	VALUES ("9b4193e4-fc26-4ac1-923b-84588640268c",
	"00000000-0000-0000-0000-000000000000",
	'transformLiteralString',
	'',
	'v_lst = param.v_lst;
smt = param.smt;
expr_number = param.expr_number;

// create expression
create object instance expr of Expression;
relate expr to smt across R775;
expr.expression_number = expr_number;

// link type
select one s_dt related by v_lst->V_VAL[R801]->S_DT[R820];
select many s_dims from instances of S_DIM where false;
type = TypeReference::getInstance( s_dt:s_dt, s_dims:s_dims );
relate type to expr across R795;

// create literal
create object instance lit of Literal;
relate lit to expr across R776;
lit.value = v_lst.Value;',
	"ba5eda7a-def5-0000-0000-000000000000",
	1,
	'',
	0);
INSERT INTO S_SPARM
	VALUES ("a873130b-40ad-4839-b876-8d33c4762408",
	"9b4193e4-fc26-4ac1-923b-84588640268c",
	'smt',
	"056a9b55-7c4c-45a4-a684-ea45fce8fa86",
	0,
	'',
	"c38014e7-7d76-4a7e-927c-96423ff20c92",
	'');
INSERT INTO S_DT_PROXY
	VALUES ("056a9b55-7c4c-45a4-a684-ea45fce8fa86",
	"00000000-0000-0000-0000-000000000000",
	'inst_ref<Statement>',
	'',
	'',
	'../../architecture/statement/statement.xtuml');
INSERT INTO S_SPARM
	VALUES ("c77c2625-2619-46bd-b4f6-ef85d5107e3a",
	"9b4193e4-fc26-4ac1-923b-84588640268c",
	'expr_number',
	"ba5eda7a-def5-0000-0000-000000000004",
	0,
	'',
	"a873130b-40ad-4839-b876-8d33c4762408",
	'');
INSERT INTO S_SPARM
	VALUES ("c38014e7-7d76-4a7e-927c-96423ff20c92",
	"9b4193e4-fc26-4ac1-923b-84588640268c",
	'v_lst',
	"666662db-c722-4168-962e-44206d77b36d",
	0,
	'',
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO S_DT_PROXY
	VALUES ("666662db-c722-4168-962e-44206d77b36d",
	"00000000-0000-0000-0000-000000000000",
	'inst_ref<Literal String>',
	'',
	'',
	'../../../../../mcooa/models/mcooa/ooaofooa/Value/Value.xtuml');
INSERT INTO PE_PE
	VALUES ("9b4193e4-fc26-4ac1-923b-84588640268c",
	1,
	"c7e18228-e420-4b1e-9c87-113a222b7b0b",
	"00000000-0000-0000-0000-000000000000",
	1);
INSERT INTO S_SYNC
	VALUES ("f1557d8d-a3a4-490d-979c-9280f199fe5b",
	"00000000-0000-0000-0000-000000000000",
	'transformLiteralBoolean',
	'',
	'v_lbo = param.v_lbo;
smt = param.smt;
expr_number = param.expr_number;

// create expression
create object instance expr of Expression;
relate expr to smt across R775;
expr.expression_number = expr_number;

// link type
select one s_dt related by v_lbo->V_VAL[R801]->S_DT[R820];
select many s_dims from instances of S_DIM where false;
type = TypeReference::getInstance( s_dt:s_dt, s_dims:s_dims );
relate type to expr across R795;

// create literal
create object instance lit of Literal;
relate lit to expr across R776;
if ( "true" == TEMP::sub( format:"l", s:v_lbo.Value ) )
  lit.value = "true";
else
  lit.value = "false";
end if;',
	"ba5eda7a-def5-0000-0000-000000000000",
	1,
	'',
	0);
INSERT INTO S_SPARM
	VALUES ("9457fbf0-2837-49b4-8160-3ab017e2c4cb",
	"f1557d8d-a3a4-490d-979c-9280f199fe5b",
	'smt',
	"056a9b55-7c4c-45a4-a684-ea45fce8fa86",
	0,
	'',
	"93081e7f-e097-4f45-9024-5198ac760f33",
	'');
INSERT INTO S_SPARM
	VALUES ("78c31103-4cd1-4623-8979-59a4ba9edb55",
	"f1557d8d-a3a4-490d-979c-9280f199fe5b",
	'expr_number',
	"ba5eda7a-def5-0000-0000-000000000004",
	0,
	'',
	"9457fbf0-2837-49b4-8160-3ab017e2c4cb",
	'');
INSERT INTO S_SPARM
	VALUES ("93081e7f-e097-4f45-9024-5198ac760f33",
	"f1557d8d-a3a4-490d-979c-9280f199fe5b",
	'v_lbo',
	"fecf81e2-9424-4fe2-87ea-e1391b11dc03",
	0,
	'',
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO S_DT_PROXY
	VALUES ("fecf81e2-9424-4fe2-87ea-e1391b11dc03",
	"00000000-0000-0000-0000-000000000000",
	'inst_ref<Literal Boolean>',
	'',
	'',
	'../../../../../mcooa/models/mcooa/ooaofooa/Value/Value.xtuml');
INSERT INTO PE_PE
	VALUES ("f1557d8d-a3a4-490d-979c-9280f199fe5b",
	1,
	"c7e18228-e420-4b1e-9c87-113a222b7b0b",
	"00000000-0000-0000-0000-000000000000",
	1);
INSERT INTO S_SYNC
	VALUES ("b3ec390d-30de-45fd-adb9-20477218ba3e",
	"00000000-0000-0000-0000-000000000000",
	'transformLiteralInteger',
	'',
	'v_lin = param.v_lin;
smt = param.smt;
expr_number = param.expr_number;

// create expression
create object instance expr of Expression;
relate expr to smt across R775;
expr.expression_number = expr_number;

// link type
select one s_dt related by v_lin->V_VAL[R801]->S_DT[R820];
select many s_dims from instances of S_DIM where false;
type = TypeReference::getInstance( s_dt:s_dt, s_dims:s_dims );
relate type to expr across R795;

// create literal
create object instance lit of Literal;
relate lit to expr across R776;
lit.value = v_lin.Value;',
	"ba5eda7a-def5-0000-0000-000000000000",
	1,
	'',
	0);
INSERT INTO S_SPARM
	VALUES ("bdd0a822-5b2c-459d-b8fc-c7d3cd55ccae",
	"b3ec390d-30de-45fd-adb9-20477218ba3e",
	'smt',
	"056a9b55-7c4c-45a4-a684-ea45fce8fa86",
	0,
	'',
	"082028b4-b4ea-4146-a3e8-178cb0435e80",
	'');
INSERT INTO S_SPARM
	VALUES ("74c85f69-2a82-4a44-ae6f-d57c4d041c8d",
	"b3ec390d-30de-45fd-adb9-20477218ba3e",
	'expr_number',
	"ba5eda7a-def5-0000-0000-000000000004",
	0,
	'',
	"bdd0a822-5b2c-459d-b8fc-c7d3cd55ccae",
	'');
INSERT INTO S_SPARM
	VALUES ("082028b4-b4ea-4146-a3e8-178cb0435e80",
	"b3ec390d-30de-45fd-adb9-20477218ba3e",
	'v_lin',
	"d3e773c6-5c55-41f1-9e19-b99adc6231fb",
	0,
	'',
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO S_DT_PROXY
	VALUES ("d3e773c6-5c55-41f1-9e19-b99adc6231fb",
	"00000000-0000-0000-0000-000000000000",
	'inst_ref<Literal Integer>',
	'',
	'',
	'../../../../../mcooa/models/mcooa/ooaofooa/Value/Value.xtuml');
INSERT INTO PE_PE
	VALUES ("b3ec390d-30de-45fd-adb9-20477218ba3e",
	1,
	"c7e18228-e420-4b1e-9c87-113a222b7b0b",
	"00000000-0000-0000-0000-000000000000",
	1);
INSERT INTO S_SYNC
	VALUES ("53ea3ca9-32c7-41d3-a7dc-842a7b74e5b9",
	"00000000-0000-0000-0000-000000000000",
	'transformLiteralReal',
	'',
	'v_lrl = param.v_lrl;
smt = param.smt;
expr_number = param.expr_number;

// create expression
create object instance expr of Expression;
relate expr to smt across R775;
expr.expression_number = expr_number;

// link type
select one s_dt related by v_lrl->V_VAL[R801]->S_DT[R820];
select many s_dims from instances of S_DIM where false;
type = TypeReference::getInstance( s_dt:s_dt, s_dims:s_dims );
relate type to expr across R795;

// create literal
create object instance lit of Literal;
relate lit to expr across R776;
lit.value = v_lrl.Value;',
	"ba5eda7a-def5-0000-0000-000000000000",
	1,
	'',
	0);
INSERT INTO S_SPARM
	VALUES ("c34e4ec6-c495-4159-8e4c-3b2b470c00e0",
	"53ea3ca9-32c7-41d3-a7dc-842a7b74e5b9",
	'smt',
	"056a9b55-7c4c-45a4-a684-ea45fce8fa86",
	0,
	'',
	"446a8008-8d7f-425e-b7e0-92f327ea4bb4",
	'');
INSERT INTO S_SPARM
	VALUES ("b4053f4c-4ccc-46ca-8874-2d05796e8a10",
	"53ea3ca9-32c7-41d3-a7dc-842a7b74e5b9",
	'expr_number',
	"ba5eda7a-def5-0000-0000-000000000004",
	0,
	'',
	"c34e4ec6-c495-4159-8e4c-3b2b470c00e0",
	'');
INSERT INTO S_SPARM
	VALUES ("446a8008-8d7f-425e-b7e0-92f327ea4bb4",
	"53ea3ca9-32c7-41d3-a7dc-842a7b74e5b9",
	'v_lrl',
	"30a9f6d7-41c6-41db-b5ed-53368c1bfb0a",
	0,
	'',
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO S_DT_PROXY
	VALUES ("30a9f6d7-41c6-41db-b5ed-53368c1bfb0a",
	"00000000-0000-0000-0000-000000000000",
	'inst_ref<Literal Real>',
	'',
	'',
	'../../../../../mcooa/models/mcooa/ooaofooa/Value/Value.xtuml');
INSERT INTO PE_PE
	VALUES ("53ea3ca9-32c7-41d3-a7dc-842a7b74e5b9",
	1,
	"c7e18228-e420-4b1e-9c87-113a222b7b0b",
	"00000000-0000-0000-0000-000000000000",
	1);
INSERT INTO S_SYNC
	VALUES ("98f9155c-364b-4e6c-9559-06fb840acd58",
	"00000000-0000-0000-0000-000000000000",
	'transformLiteralEnumerator',
	'',
	'v_len = param.v_len;
smt = param.smt;
expr_number = param.expr_number;

// create expression
create object instance expr of Expression;
relate expr to smt across R775;
expr.expression_number = expr_number;

// link type
select one s_dt related by v_len->V_VAL[R801]->S_DT[R820];
select many s_dims from instances of S_DIM where false;
type = TypeReference::getInstance( s_dt:s_dt, s_dims:s_dims );
relate type to expr across R795;

// create enumerator reference
create object instance enum_ref of EnumeratorReference;
relate enum_ref to expr across R776;
select one s_enum related by v_len->S_ENUM[R824];
select any enumer related by s_enum->S_EDT[R27]->S_DT[R17]->Type[R423]->EnumeratedType[R407]->Enumerator[R415] where ( selected.name == TEMP::sub( format:"u", s:s_enum.Name ) );
if ( not_empty enumer )
  select one edt_file related by enumer->EnumeratedType[R415]->File[R401];
  ::addFileToImports( file: ::getFileForStatement( smt:smt ), file_to_import:edt_file, type:ImportType::IMPL );
  relate enumer to enum_ref across R786;
else
  // TODO bad
end if;',
	"ba5eda7a-def5-0000-0000-000000000000",
	1,
	'',
	0);
INSERT INTO S_SPARM
	VALUES ("00505c19-714d-4def-a540-0b8b909a577a",
	"98f9155c-364b-4e6c-9559-06fb840acd58",
	'smt',
	"056a9b55-7c4c-45a4-a684-ea45fce8fa86",
	0,
	'',
	"93178905-0f33-4809-9812-ec085538e3d1",
	'');
INSERT INTO S_SPARM
	VALUES ("57a0d46d-8ecc-4d63-b6a4-2eaa8e88be15",
	"98f9155c-364b-4e6c-9559-06fb840acd58",
	'expr_number',
	"ba5eda7a-def5-0000-0000-000000000004",
	0,
	'',
	"00505c19-714d-4def-a540-0b8b909a577a",
	'');
INSERT INTO S_SPARM
	VALUES ("93178905-0f33-4809-9812-ec085538e3d1",
	"98f9155c-364b-4e6c-9559-06fb840acd58",
	'v_len',
	"24bb2ed2-1c7b-43d7-ade3-39372b27dbcc",
	0,
	'',
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO S_DT_PROXY
	VALUES ("24bb2ed2-1c7b-43d7-ade3-39372b27dbcc",
	"00000000-0000-0000-0000-000000000000",
	'inst_ref<Literal Enumerator>',
	'',
	'',
	'../../../../../mcooa/models/mcooa/ooaofooa/Value/Value.xtuml');
INSERT INTO PE_PE
	VALUES ("98f9155c-364b-4e6c-9559-06fb840acd58",
	1,
	"c7e18228-e420-4b1e-9c87-113a222b7b0b",
	"00000000-0000-0000-0000-000000000000",
	1);
INSERT INTO S_SYNC
	VALUES ("9baa4251-f211-436f-b9c2-599fbc520761",
	"00000000-0000-0000-0000-000000000000",
	'transformTransientValueReference',
	'',
	'v_tvl = param.v_tvl;
smt = param.smt;
expr_number = param.expr_number;

// create expression
create object instance expr of Expression;
relate expr to smt across R775;
expr.expression_number = expr_number;

// link type
select one s_dt related by v_tvl->V_VAL[R801]->S_DT[R820];
select many s_dims from instances of S_DIM where false;
type = TypeReference::getInstance( s_dt:s_dt, s_dims:s_dims );
relate type to expr across R795;

// if this is the first location, create a new variable
select one v_var related by v_tvl->V_VAR[R805];
select any existing_var related by smt->CodeBlock[R450]->Variable[R458] where ( selected.name == v_var.Name );
if ( empty existing_var ) // cannot declare two variables of the same name in the same scope
  ::transformVariable( v_var:v_var, smt:smt );
end if;

// create variable reference
select any var related by smt->CodeBlock[R450]->Variable[R458] where ( selected.name == v_var.Name );
create object instance var_ref of VariableReference;
relate var to var_ref across R782;
relate var_ref to expr across R776;
// add type reference to file
select one expr_type related by var->TypeReference[R461]->Type[R3800];
::addTypeToImports( file: ::getFileForStatement( smt:smt ), type_to_import:expr_type, type:ImportType::IMPL );',
	"ba5eda7a-def5-0000-0000-000000000000",
	1,
	'',
	0);
INSERT INTO S_SPARM
	VALUES ("57a85e83-30bc-4fe9-9d5b-ecc39db0bbb4",
	"9baa4251-f211-436f-b9c2-599fbc520761",
	'smt',
	"056a9b55-7c4c-45a4-a684-ea45fce8fa86",
	0,
	'',
	"93bcbf77-07a4-44fb-b118-ea0d364c3792",
	'');
INSERT INTO S_SPARM
	VALUES ("83290380-a04f-4f21-9939-c78486cb754f",
	"9baa4251-f211-436f-b9c2-599fbc520761",
	'expr_number',
	"ba5eda7a-def5-0000-0000-000000000004",
	0,
	'',
	"57a85e83-30bc-4fe9-9d5b-ecc39db0bbb4",
	'');
INSERT INTO S_SPARM
	VALUES ("93bcbf77-07a4-44fb-b118-ea0d364c3792",
	"9baa4251-f211-436f-b9c2-599fbc520761",
	'v_tvl',
	"6458e266-dbd1-453f-b475-dbd63f086878",
	0,
	'',
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO S_DT_PROXY
	VALUES ("6458e266-dbd1-453f-b475-dbd63f086878",
	"00000000-0000-0000-0000-000000000000",
	'inst_ref<Transient Value Reference>',
	'',
	'',
	'../../../../../mcooa/models/mcooa/ooaofooa/Value/Value.xtuml');
INSERT INTO PE_PE
	VALUES ("9baa4251-f211-436f-b9c2-599fbc520761",
	1,
	"c7e18228-e420-4b1e-9c87-113a222b7b0b",
	"00000000-0000-0000-0000-000000000000",
	1);
INSERT INTO S_SYNC
	VALUES ("f0b6d254-8b4b-47ae-a1ae-866d17ce309f",
	"00000000-0000-0000-0000-000000000000",
	'transformInstanceReference',
	'',
	'v_irf = param.v_irf;
smt = param.smt;
expr_number = param.expr_number;

// create expression
create object instance expr of Expression;
relate expr to smt across R775;
expr.expression_number = expr_number;

// link type
select one s_dt related by v_irf->V_VAL[R801]->S_DT[R820];
select many s_dims from instances of S_DIM where false;
type = TypeReference::getInstance( s_dt:s_dt, s_dims:s_dims );
relate type to expr across R795;

// if this is the first location, create a new variable
select one v_var related by v_irf->V_VAR[R808];
if ( "self" == TEMP::sub( format:"l", s:v_var.Name ) ) // reference to self
  // create named reference
  create object instance self_ref of NamedReference;
  relate self_ref to expr across R776;
  self_ref.name = "self()";
else
  select any existing_var related by smt->CodeBlock[R450]->Variable[R458] where ( selected.name == v_var.Name );
  if ( empty existing_var ) // cannot declare two variables of the same name in the same scope
    ::transformVariable( v_var:v_var, smt:smt );
  end if;
  // create variable reference
  select any var related by smt->CodeBlock[R450]->Variable[R458] where ( selected.name == v_var.Name );
  create object instance var_ref of VariableReference;
  relate var to var_ref across R782;
  relate var_ref to expr across R776;
  // add type reference to file
  select one expr_type related by var->TypeReference[R461]->Type[R3800];
  ::addTypeToImports( file: ::getFileForStatement( smt:smt ), type_to_import:expr_type, type:ImportType::IMPL );
end if;',
	"ba5eda7a-def5-0000-0000-000000000000",
	1,
	'',
	0);
INSERT INTO S_SPARM
	VALUES ("b0c14e88-07fb-483a-b0fe-6bb9c187a688",
	"f0b6d254-8b4b-47ae-a1ae-866d17ce309f",
	'smt',
	"056a9b55-7c4c-45a4-a684-ea45fce8fa86",
	0,
	'',
	"48712979-6770-4641-b4b7-a3b6236db85a",
	'');
INSERT INTO S_SPARM
	VALUES ("97010928-6f45-4416-9192-8c5db8edbedf",
	"f0b6d254-8b4b-47ae-a1ae-866d17ce309f",
	'expr_number',
	"ba5eda7a-def5-0000-0000-000000000004",
	0,
	'',
	"b0c14e88-07fb-483a-b0fe-6bb9c187a688",
	'');
INSERT INTO S_SPARM
	VALUES ("48712979-6770-4641-b4b7-a3b6236db85a",
	"f0b6d254-8b4b-47ae-a1ae-866d17ce309f",
	'v_irf',
	"e8b1ed3a-682d-4973-a5b6-9902253e77b0",
	0,
	'',
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO S_DT_PROXY
	VALUES ("e8b1ed3a-682d-4973-a5b6-9902253e77b0",
	"00000000-0000-0000-0000-000000000000",
	'inst_ref<Instance Reference>',
	'',
	'',
	'../../../../../mcooa/models/mcooa/ooaofooa/Value/Value.xtuml');
INSERT INTO PE_PE
	VALUES ("f0b6d254-8b4b-47ae-a1ae-866d17ce309f",
	1,
	"c7e18228-e420-4b1e-9c87-113a222b7b0b",
	"00000000-0000-0000-0000-000000000000",
	1);
INSERT INTO S_SYNC
	VALUES ("3f1d73c7-9c37-449c-ac12-23b9beb9b341",
	"00000000-0000-0000-0000-000000000000",
	'transformInstanceSetReference',
	'',
	'v_isr = param.v_isr;
smt = param.smt;
expr_number = param.expr_number;

// create expression
create object instance expr of Expression;
relate expr to smt across R775;
expr.expression_number = expr_number;

// link type
select one s_dt related by v_isr->V_VAL[R801]->S_DT[R820];
select many s_dims from instances of S_DIM where false;
type = TypeReference::getInstance( s_dt:s_dt, s_dims:s_dims );
relate type to expr across R795;

// if this is the first location, create a new variable
select one v_var related by v_isr->V_VAR[R809];
select any existing_var related by smt->CodeBlock[R450]->Variable[R458] where ( selected.name == v_var.Name );
if ( empty existing_var ) // cannot declare two variables of the same name in the same scope
  ::transformVariable( v_var:v_var, smt:smt );
end if;

// create variable reference
select any var related by smt->CodeBlock[R450]->Variable[R458] where ( selected.name == v_var.Name );
create object instance var_ref of VariableReference;
relate var to var_ref across R782;
relate var_ref to expr across R776;
// add type reference to file
select one expr_type related by var->TypeReference[R461]->Type[R3800];
::addTypeToImports( file: ::getFileForStatement( smt:smt ), type_to_import:expr_type, type:ImportType::IMPL );',
	"ba5eda7a-def5-0000-0000-000000000000",
	1,
	'',
	0);
INSERT INTO S_SPARM
	VALUES ("33c61614-3485-4718-a6f3-a611eaf4c2d4",
	"3f1d73c7-9c37-449c-ac12-23b9beb9b341",
	'smt',
	"056a9b55-7c4c-45a4-a684-ea45fce8fa86",
	0,
	'',
	"3a37ec98-e379-4d89-bbd3-46cfd78035be",
	'');
INSERT INTO S_SPARM
	VALUES ("915bf135-f060-4090-86b9-5a0e7cb536a3",
	"3f1d73c7-9c37-449c-ac12-23b9beb9b341",
	'expr_number',
	"ba5eda7a-def5-0000-0000-000000000004",
	0,
	'',
	"33c61614-3485-4718-a6f3-a611eaf4c2d4",
	'');
INSERT INTO S_SPARM
	VALUES ("3a37ec98-e379-4d89-bbd3-46cfd78035be",
	"3f1d73c7-9c37-449c-ac12-23b9beb9b341",
	'v_isr',
	"8fd83df6-a99a-4701-a61f-75349c3e6b4d",
	0,
	'',
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO S_DT_PROXY
	VALUES ("8fd83df6-a99a-4701-a61f-75349c3e6b4d",
	"00000000-0000-0000-0000-000000000000",
	'inst_ref<Instance Set Reference>',
	'',
	'',
	'../../../../../mcooa/models/mcooa/ooaofooa/Value/Value.xtuml');
INSERT INTO PE_PE
	VALUES ("3f1d73c7-9c37-449c-ac12-23b9beb9b341",
	1,
	"c7e18228-e420-4b1e-9c87-113a222b7b0b",
	"00000000-0000-0000-0000-000000000000",
	1);
INSERT INTO S_SYNC
	VALUES ("1d4aa4ca-4e67-4da0-94c1-3bf93d08516b",
	"00000000-0000-0000-0000-000000000000",
	'transformAttributeValueReference',
	'',
	'v_avl = param.v_avl;
smt = param.smt;
expr_number = param.expr_number;

// create expression
create object instance expr of Expression;
relate expr to smt across R775;
expr.expression_number = expr_number;

// link type
select one s_dt related by v_avl->V_VAL[R801]->S_DT[R820];
select many s_dims from instances of S_DIM where false;
type = TypeReference::getInstance( s_dt:s_dt, s_dims:s_dims );
relate type to expr across R795;

create object instance acc of AttributeAccess;
relate acc to expr across R776;
select one root_val related by v_avl->V_VAL[R807];
::transformExpression( v_val:root_val, expr_number:expr.expression_number + ".1", smt:smt );
select any root_expr related by smt->Expression[R775] where ( selected.expression_number == expr.expression_number + ".1" );
relate root_expr to acc across R785;
select one attr related by v_avl->O_ATTR[R806]->Attribute[R414];
relate attr to acc across R788;',
	"ba5eda7a-def5-0000-0000-000000000000",
	1,
	'',
	0);
INSERT INTO S_SPARM
	VALUES ("170c65bd-6cdf-4c7a-b837-83cf7cf5c373",
	"1d4aa4ca-4e67-4da0-94c1-3bf93d08516b",
	'smt',
	"056a9b55-7c4c-45a4-a684-ea45fce8fa86",
	0,
	'',
	"140767eb-f06c-45c9-9acf-5f7b30e749ed",
	'');
INSERT INTO S_SPARM
	VALUES ("5f0c3736-c682-489b-95ee-4262f8641df9",
	"1d4aa4ca-4e67-4da0-94c1-3bf93d08516b",
	'expr_number',
	"ba5eda7a-def5-0000-0000-000000000004",
	0,
	'',
	"170c65bd-6cdf-4c7a-b837-83cf7cf5c373",
	'');
INSERT INTO S_SPARM
	VALUES ("140767eb-f06c-45c9-9acf-5f7b30e749ed",
	"1d4aa4ca-4e67-4da0-94c1-3bf93d08516b",
	'v_avl',
	"71ed37d1-359a-4941-b904-f5450eb45d4e",
	0,
	'',
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO S_DT_PROXY
	VALUES ("71ed37d1-359a-4941-b904-f5450eb45d4e",
	"00000000-0000-0000-0000-000000000000",
	'inst_ref<Attribute Value Reference>',
	'',
	'',
	'../../../../../mcooa/models/mcooa/ooaofooa/Value/Value.xtuml');
INSERT INTO PE_PE
	VALUES ("1d4aa4ca-4e67-4da0-94c1-3bf93d08516b",
	1,
	"c7e18228-e420-4b1e-9c87-113a222b7b0b",
	"00000000-0000-0000-0000-000000000000",
	1);
INSERT INTO S_SYNC
	VALUES ("77231cfc-994f-4a99-b855-4d0f92448488",
	"00000000-0000-0000-0000-000000000000",
	'transformParameterValue',
	'',
	'v_pvl = param.v_pvl;
smt = param.smt;
expr_number = param.expr_number;

// create expression
create object instance expr of Expression;
relate expr to smt across R775;
expr.expression_number = expr_number;

// link type
select one s_dt related by v_pvl->V_VAL[R801]->S_DT[R820];
select many s_dims from instances of S_DIM where false;
type = TypeReference::getInstance( s_dt:s_dt, s_dims:s_dims );
relate type to expr across R795;

create object instance ref of ParameterReference;
relate ref to expr across R776;
param_name = "";
select one brg_param related by v_pvl->S_BPARM[R831];
if ( not_empty brg_param ) param_name = brg_param.Name; else
select one fnc_param related by v_pvl->S_SPARM[R832];
if ( not_empty fnc_param ) param_name = fnc_param.Name; else
select one op_param related by v_pvl->O_TPARM[R833];
if ( not_empty op_param ) param_name = op_param.Name; else
select one ep_param related by v_pvl->C_PP[R843];
if ( not_empty ep_param ) param_name = ep_param.Name;
else
  // TODO bad
end if; end if; end if; end if;
select any formal_param related by smt->CodeBlock[R450]->InvocableObject[R4000]->FormalParameter[R429]
  where ( selected.name == "p_" + param_name );
if ( not_empty formal_param )
  relate formal_param to ref across R781;
else
  // TODO bad
end if;',
	"ba5eda7a-def5-0000-0000-000000000000",
	1,
	'',
	0);
INSERT INTO S_SPARM
	VALUES ("b62d149d-1b69-4fd6-bccb-01f010505329",
	"77231cfc-994f-4a99-b855-4d0f92448488",
	'smt',
	"056a9b55-7c4c-45a4-a684-ea45fce8fa86",
	0,
	'',
	"13373540-fc57-4926-b6e6-1900b41d5f8c",
	'');
INSERT INTO S_SPARM
	VALUES ("715a1af4-80e8-4771-88c3-9f6c871f2bbc",
	"77231cfc-994f-4a99-b855-4d0f92448488",
	'expr_number',
	"ba5eda7a-def5-0000-0000-000000000004",
	0,
	'',
	"b62d149d-1b69-4fd6-bccb-01f010505329",
	'');
INSERT INTO S_SPARM
	VALUES ("13373540-fc57-4926-b6e6-1900b41d5f8c",
	"77231cfc-994f-4a99-b855-4d0f92448488",
	'v_pvl',
	"6f6d9360-7969-4454-abf8-336e689f3bbd",
	0,
	'',
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO S_DT_PROXY
	VALUES ("6f6d9360-7969-4454-abf8-336e689f3bbd",
	"00000000-0000-0000-0000-000000000000",
	'inst_ref<Parameter Value>',
	'',
	'',
	'../../../../../mcooa/models/mcooa/ooaofooa/Value/Value.xtuml');
INSERT INTO PE_PE
	VALUES ("77231cfc-994f-4a99-b855-4d0f92448488",
	1,
	"c7e18228-e420-4b1e-9c87-113a222b7b0b",
	"00000000-0000-0000-0000-000000000000",
	1);
INSERT INTO S_SYNC
	VALUES ("7e680d3e-8d07-4140-bd41-374cd5755386",
	"00000000-0000-0000-0000-000000000000",
	'transformBridgeValue',
	'',
	'v_brv = param.v_brv;
smt = param.smt;
expr_number = param.expr_number;

// create expression
create object instance expr of Expression;
relate expr to smt across R775;
expr.expression_number = expr_number;

// link type
select one s_dt related by v_brv->V_VAL[R801]->S_DT[R820];
select many s_dims from instances of S_DIM where false;
type = TypeReference::getInstance( s_dt:s_dt, s_dims:s_dims );
relate type to expr across R795;

select one util_func related by v_brv->S_BRG[R828]->UtilityFunction[R4570];
if ( empty util_func )
  select one s_ee related by v_brv->S_BRG[R828]->S_EE[R19];
  select one s_ee_pkg related by s_ee->PE_PE[R8001]->EP_PKG[R8000];
  select any empty_comp_def from instances of ComponentDefinition where false;
  ::transformUtility( s_ee:s_ee, ep_pkg:s_ee_pkg, containing_comp_def:empty_comp_def, exclude:true, path: ::ep_pkgToPath( ep_pkg:s_ee_pkg ) );
  select one util_func related by v_brv->S_BRG[R828]->UtilityFunction[R4570];
end if;
select one invocable related by util_func->InvocableObject[R427];
select one utility related by util_func->Utility[R4559];
select one utility_file related by utility->File[R401];
containing_comp_def = ::getCompDefForStatement( smt:smt );
select one containing_comp_file related by containing_comp_def->File[R401];
::addFileToImports( file:containing_comp_file, file_to_import:utility_file, type:ImportType::IMPL );
::addStringToImports( file:containing_comp_file, s: ::pathToPackage( path:utility_file.path ) + ".impl." + utility_file.name + "Impl", type:ImportType::IMPL );
if ( not_empty containing_comp_def )
  select any util_ref related by utility->UtilityReference[R4558] where ( selected.comp_name == containing_comp_def.name and selected.comp_package == containing_comp_def.package );
  if ( empty util_ref )
    create object instance util_ref of UtilityReference;
    relate utility to containing_comp_def across R4558 using util_ref;
  end if;
end if;
if ( not_empty invocable )
  // create invocation
  create object instance invoc of Invocation;
  relate invoc to expr across R776;
  relate invoc to invocable across R792;
  // create named reference expression
  create object instance expr2 of Expression;
  relate expr2 to smt across R775;
  expr2.expression_number = expr.expression_number + ".1";
  void_type = TypeReference::getBuiltinTypeReference( name:"void" );
  relate void_type to expr2 across R795;
  // create named reference
  create object instance named_ref of NamedReference;
  relate named_ref to expr2 across R776;
  relate expr2 to invoc across R798;
  named_ref.name = "context()." + utility.name + "()";
  // transform actual parameters
  select many v_pars related by v_brv->V_PAR[R810];
  ::transformActualParameters( invocation:invoc, v_pars:v_pars, expr_number:expr.expression_number, base_num:2 );
else
  // TODO bad
end if;',
	"ba5eda7a-def5-0000-0000-000000000000",
	1,
	'',
	0);
INSERT INTO S_SPARM
	VALUES ("e49193ee-e840-4d38-bb6e-fcae5438ff52",
	"7e680d3e-8d07-4140-bd41-374cd5755386",
	'smt',
	"056a9b55-7c4c-45a4-a684-ea45fce8fa86",
	0,
	'',
	"a6c6aba5-be48-4297-82ef-6a2da6f4e3be",
	'');
INSERT INTO S_SPARM
	VALUES ("142854ab-8640-41ec-9cf4-ef9d8dd415c3",
	"7e680d3e-8d07-4140-bd41-374cd5755386",
	'expr_number',
	"ba5eda7a-def5-0000-0000-000000000004",
	0,
	'',
	"e49193ee-e840-4d38-bb6e-fcae5438ff52",
	'');
INSERT INTO S_SPARM
	VALUES ("a6c6aba5-be48-4297-82ef-6a2da6f4e3be",
	"7e680d3e-8d07-4140-bd41-374cd5755386",
	'v_brv',
	"cb6d600e-2e67-4485-9f1b-abd6aefb9d6e",
	0,
	'',
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO S_DT_PROXY
	VALUES ("cb6d600e-2e67-4485-9f1b-abd6aefb9d6e",
	"00000000-0000-0000-0000-000000000000",
	'inst_ref<Bridge Value>',
	'',
	'',
	'../../../../../mcooa/models/mcooa/ooaofooa/Value/Value.xtuml');
INSERT INTO PE_PE
	VALUES ("7e680d3e-8d07-4140-bd41-374cd5755386",
	1,
	"c7e18228-e420-4b1e-9c87-113a222b7b0b",
	"00000000-0000-0000-0000-000000000000",
	1);
INSERT INTO S_SYNC
	VALUES ("9662ef65-4795-4a89-9df5-b942d5e4eec1",
	"00000000-0000-0000-0000-000000000000",
	'transformFunctionValue',
	'',
	'v_fnv = param.v_fnv;
smt = param.smt;
expr_number = param.expr_number;

// create expression
create object instance expr of Expression;
relate expr to smt across R775;
expr.expression_number = expr_number;

// link type
select one s_dt related by v_fnv->V_VAL[R801]->S_DT[R820];
select many s_dims from instances of S_DIM where false;
type = TypeReference::getInstance( s_dt:s_dt, s_dims:s_dims );
relate type to expr across R795;

select one s_sync related by v_fnv->S_SYNC[R827];
containing_comp_def = ::getCompDefForStatement( smt:smt );
select any invocable related by containing_comp_def->Function[R405]->InvocableObject[R427] where ( selected.name == s_sync.Name );
if ( not_empty invocable )
  // create invocation
  create object instance invoc of Invocation;
  relate invoc to expr across R776;
  relate invoc to invocable across R792;
  // create named reference expression
  create object instance expr2 of Expression;
  relate expr2 to smt across R775;
  expr2.expression_number = expr.expression_number + ".1";
  void_type = TypeReference::getBuiltinTypeReference( name:"void" );
  relate void_type to expr2 across R795;
  // create named reference
  create object instance named_ref of NamedReference;
  relate named_ref to expr2 across R776;
  relate expr2 to invoc across R798;
  named_ref.name = "context()";
  // transform actual parameters
  select many v_pars related by v_fnv->V_PAR[R817];
  ::transformActualParameters( invocation:invoc, v_pars:v_pars, expr_number:expr.expression_number, base_num:2 );
else
  // TODO bad
end if;',
	"ba5eda7a-def5-0000-0000-000000000000",
	1,
	'',
	0);
INSERT INTO S_SPARM
	VALUES ("914bf29a-beaa-483d-b32d-38d69f7303b8",
	"9662ef65-4795-4a89-9df5-b942d5e4eec1",
	'smt',
	"056a9b55-7c4c-45a4-a684-ea45fce8fa86",
	0,
	'',
	"da1c25d7-6041-4e08-933b-ed8bda1b9aa7",
	'');
INSERT INTO S_SPARM
	VALUES ("7770786f-0481-495f-86be-7379e7de9a56",
	"9662ef65-4795-4a89-9df5-b942d5e4eec1",
	'expr_number',
	"ba5eda7a-def5-0000-0000-000000000004",
	0,
	'',
	"914bf29a-beaa-483d-b32d-38d69f7303b8",
	'');
INSERT INTO S_SPARM
	VALUES ("da1c25d7-6041-4e08-933b-ed8bda1b9aa7",
	"9662ef65-4795-4a89-9df5-b942d5e4eec1",
	'v_fnv',
	"6398f7d8-b16d-4a52-9039-f9da477c8cb9",
	0,
	'',
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO S_DT_PROXY
	VALUES ("6398f7d8-b16d-4a52-9039-f9da477c8cb9",
	"00000000-0000-0000-0000-000000000000",
	'inst_ref<Function Value>',
	'',
	'',
	'../../../../../mcooa/models/mcooa/ooaofooa/Value/Value.xtuml');
INSERT INTO PE_PE
	VALUES ("9662ef65-4795-4a89-9df5-b942d5e4eec1",
	1,
	"c7e18228-e420-4b1e-9c87-113a222b7b0b",
	"00000000-0000-0000-0000-000000000000",
	1);
INSERT INTO S_SYNC
	VALUES ("24e503c1-407c-444f-8b27-de5e0d284ec5",
	"00000000-0000-0000-0000-000000000000",
	'transformOperationValue',
	'',
	'v_trv = param.v_trv;
smt = param.smt;
expr_number = param.expr_number;

// create expression
create object instance expr of Expression;
relate expr to smt across R775;
expr.expression_number = expr_number;

// link type
select one s_dt related by v_trv->V_VAL[R801]->S_DT[R820];
select many s_dims from instances of S_DIM where false;
type = TypeReference::getInstance( s_dt:s_dt, s_dims:s_dims );
relate type to expr across R795;

select one o_tfr related by v_trv->O_TFR[R829];
select any invocable related by o_tfr->O_OBJ[R115]->Class[R409]->Operation[R416]->InvocableObject[R427] where ( selected.name == o_tfr.Name );
if ( not_empty invocable )
  // create invocation
  create object instance invoc of Invocation;
  relate invoc to expr across R776;
  relate invoc to invocable across R792;
  // relate expression to expression as statement
  if ( Scope::Instance == o_tfr.Instance_Based )
    select one op_v_var related by v_trv->V_VAR[R830];
    if ( not_empty op_v_var ) // instance based operation
      // create variable reference expression
      create object instance expr2 of Expression;
      relate expr2 to smt across R775;
      expr2.expression_number = expr.expression_number + ".1";
      relate expr2 to invoc across R798;
      select one op_s_dt related by op_v_var->S_DT[R848];
      select one op_obj related by o_tfr->O_OBJ[R115];
      op_s_dt = ::getInstRefTypeForClass( s_dt:op_s_dt, o_obj:op_obj );
      select many s_dims related by op_v_var->S_DIM[R849];
      op_type = TypeReference::getInstance( s_dt:op_s_dt, s_dims:s_dims );
      relate op_type to expr2 across R795;
      select any op_var related by smt->CodeBlock[R450]->Variable[R458] where ( selected.name == op_v_var.Name );
      if ( not_empty op_var ) // cannot declare two variables of the same name in the same scope
        create object instance var_ref of VariableReference;
        relate op_var to var_ref across R782;
        relate var_ref to expr2 across R776;
        // add type reference to file
        select one expr_type related by expr2->TypeReference[R795]->Type[R3800];
        ::addTypeToImports( file: ::getFileForStatement( smt:smt ), type_to_import:expr_type, type:ImportType::IMPL );
      elif ( "self" == op_v_var.Name )
        // create named reference
        create object instance self_ref of NamedReference;
        relate self_ref to expr2 across R776;
        self_ref.name = "self()";
      else
        // TODO bad
      end if;
    else // must be a selected reference
      // create named reference expression
      create object instance expr2 of Expression;
      relate expr2 to smt across R775;
      expr2.expression_number = expr.expression_number + ".1";
      relate expr2 to invoc across R798;
      select any s_irdt related by o_tfr->O_OBJ[R115]->S_IRDT[R123] where ( not selected.isSet );
      select one s_dt related by s_irdt->S_DT[R17];
      select many s_dims from instances of S_DIM where false;
      op_type = TypeReference::getInstance( s_dt:s_dt, s_dims:s_dims );
      relate op_type to expr2 across R795;
      // create selected reference
      create object instance sel of SelectedExpr;
      relate sel to expr2 across R776;
    end if;
  else // class based operation
    // create named reference expression
    create object instance expr2 of Expression;
    relate expr2 to smt across R775;
    expr2.expression_number = expr.expression_number + ".1";
    relate expr2 to invoc across R798;
    void_type = TypeReference::getBuiltinTypeReference( name:"void" );
    relate void_type to expr2 across R795;
    // create named reference
    create object instance named_ref of NamedReference;
    relate named_ref to expr2 across R776;
    select one target_class related by invocable->Operation[R427]->Class[R416];
    named_ref.name = "new " + target_class.name + "Impl.CLASS(context())";
    select one class_file related by target_class->File[R401];
    ::addStringToImports( file: ::getFileForStatement( smt:smt ), s: ::pathToPackage( path:class_file.path ) + ".impl." + class_file.name + "Impl", type:ImportType::IMPL );
  end if;
  // transform actual parameters
  select many v_pars related by v_trv->V_PAR[R811];
  ::transformActualParameters( invocation:invoc, v_pars:v_pars, expr_number:expr.expression_number, base_num:2 );
else
  // TODO bad
end if; ',
	"ba5eda7a-def5-0000-0000-000000000000",
	1,
	'',
	0);
INSERT INTO S_SPARM
	VALUES ("439a7295-cca2-4613-a8d2-59b1bb7cffdb",
	"24e503c1-407c-444f-8b27-de5e0d284ec5",
	'smt',
	"056a9b55-7c4c-45a4-a684-ea45fce8fa86",
	0,
	'',
	"9b8a1c3f-3ea5-4a57-9a1d-6b58152005d9",
	'');
INSERT INTO S_SPARM
	VALUES ("f4b3cb63-3242-4f7d-9981-f22cd33e4842",
	"24e503c1-407c-444f-8b27-de5e0d284ec5",
	'expr_number',
	"ba5eda7a-def5-0000-0000-000000000004",
	0,
	'',
	"439a7295-cca2-4613-a8d2-59b1bb7cffdb",
	'');
INSERT INTO S_SPARM
	VALUES ("9b8a1c3f-3ea5-4a57-9a1d-6b58152005d9",
	"24e503c1-407c-444f-8b27-de5e0d284ec5",
	'v_trv',
	"ccdae275-9bc8-42a5-b1b4-58a019d56d9a",
	0,
	'',
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO S_DT_PROXY
	VALUES ("ccdae275-9bc8-42a5-b1b4-58a019d56d9a",
	"00000000-0000-0000-0000-000000000000",
	'inst_ref<Operation Value>',
	'',
	'',
	'../../../../../mcooa/models/mcooa/ooaofooa/Value/Value.xtuml');
INSERT INTO PE_PE
	VALUES ("24e503c1-407c-444f-8b27-de5e0d284ec5",
	1,
	"c7e18228-e420-4b1e-9c87-113a222b7b0b",
	"00000000-0000-0000-0000-000000000000",
	1);
INSERT INTO S_SYNC
	VALUES ("dcbb2a44-2771-4e5b-9307-e526f492b9c5",
	"00000000-0000-0000-0000-000000000000",
	'transformSelectedReference',
	'',
	'v_slr = param.v_slr;
smt = param.smt;
expr_number = param.expr_number;

// create expression
create object instance expr of Expression;
relate expr to smt across R775;
expr.expression_number = expr_number;

// link type
select one s_dt related by v_slr->V_VAL[R801]->S_DT[R820];
select many s_dims from instances of S_DIM where false;
type = TypeReference::getInstance( s_dt:s_dt, s_dims:s_dims );
relate type to expr across R795;

// create selected reference
create object instance sel of SelectedExpr;
relate sel to expr across R776;',
	"ba5eda7a-def5-0000-0000-000000000000",
	1,
	'',
	0);
INSERT INTO S_SPARM
	VALUES ("40de260d-e1ed-4cab-8b11-74d191b01579",
	"dcbb2a44-2771-4e5b-9307-e526f492b9c5",
	'smt',
	"056a9b55-7c4c-45a4-a684-ea45fce8fa86",
	0,
	'',
	"f884d996-ad3f-4595-a2e2-d6eaa6f6751e",
	'');
INSERT INTO S_SPARM
	VALUES ("6edc742a-4092-4d0f-b903-12e47dd20ee9",
	"dcbb2a44-2771-4e5b-9307-e526f492b9c5",
	'expr_number',
	"ba5eda7a-def5-0000-0000-000000000004",
	0,
	'',
	"40de260d-e1ed-4cab-8b11-74d191b01579",
	'');
INSERT INTO S_SPARM
	VALUES ("f884d996-ad3f-4595-a2e2-d6eaa6f6751e",
	"dcbb2a44-2771-4e5b-9307-e526f492b9c5",
	'v_slr',
	"2e3ac016-f3b4-4115-ba61-4a4c0be721f1",
	0,
	'',
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO S_DT_PROXY
	VALUES ("2e3ac016-f3b4-4115-ba61-4a4c0be721f1",
	"00000000-0000-0000-0000-000000000000",
	'inst_ref<Selected Reference>',
	'',
	'',
	'../../../../../mcooa/models/mcooa/ooaofooa/Value/Value.xtuml');
INSERT INTO PE_PE
	VALUES ("dcbb2a44-2771-4e5b-9307-e526f492b9c5",
	1,
	"c7e18228-e420-4b1e-9c87-113a222b7b0b",
	"00000000-0000-0000-0000-000000000000",
	1);
INSERT INTO S_SYNC
	VALUES ("da3138f6-6403-4ea0-ba2b-c92007753c16",
	"00000000-0000-0000-0000-000000000000",
	'transformUnaryOperation',
	'',
	'v_uny = param.v_uny;
smt = param.smt;
expr_number = param.expr_number;

// create expression
create object instance expr of Expression;
relate expr to smt across R775;
expr.expression_number = expr_number;

// link type
select one s_dt related by v_uny->V_VAL[R801]->S_DT[R820];
select many s_dims from instances of S_DIM where false;
type = TypeReference::getInstance( s_dt:s_dt, s_dims:s_dims );
relate type to expr across R795;

// create the unary expression
create object instance unary of UnaryOperation;
relate unary to expr across R776;
select one op_val related by v_uny->V_VAL[R804];
if ( "not_empty" == TEMP::sub( format:"l", s:v_uny.Operator ) ) // create an additional ''not'' expression before transforming an ''empty'' expression
  unary.operator = "!";
  unary.invocation = false;
  // create ''empty'' expression
  create object instance expr2 of Expression;
  relate expr2 to smt across R775;
  expr2.expression_number = expr.expression_number + ".1";
  relate expr2 to unary across R777;
  boolean_type = TypeReference::getBuiltinTypeReference( name:"boolean" );
  relate boolean_type to expr2 across R795;
  create object instance unary2 of UnaryOperation;
  relate unary2 to expr2 across R776;
  unary2.operator = "isEmpty";
  unary2.invocation = true;
  // transform the operatnd expression
  ::transformExpression( v_val:op_val, expr_number:expr2.expression_number + ".1", smt:smt );
  select any op_expr related by smt->Expression[R775] where ( selected.expression_number == expr2.expression_number + ".1" );
  relate op_expr to unary2 across R777;
else
  if ( "not" == TEMP::sub( format:"l", s:v_uny.Operator ) )
    unary.operator = "!";
    unary.invocation = false;
  elif ( "empty" == TEMP::sub( format:"l", s:v_uny.Operator ) )
    unary.operator = "isEmpty";
    unary.invocation = true;
  elif ( "cardinality" == TEMP::sub( format:"l", s:v_uny.Operator ) )
    unary.operator = "size";
    unary.invocation = true;
  elif ( ( "+" == TEMP::sub( format:"l", s:v_uny.Operator ) ) or ( "-" == TEMP::sub( format:"l", s:v_uny.Operator ) ) )
    unary.operator = v_uny.Operator;
    unary.invocation = false;
  else
    // TODO bad
  end if;
  // transform the operatnd expression
  ::transformExpression( v_val:op_val, expr_number:expr.expression_number + ".1", smt:smt );
  select any op_expr related by smt->Expression[R775] where ( selected.expression_number == expr.expression_number + ".1" );
  relate op_expr to unary across R777;
end if;',
	"ba5eda7a-def5-0000-0000-000000000000",
	1,
	'',
	0);
INSERT INTO S_SPARM
	VALUES ("8e403a60-819b-4a3f-8a58-b98a7ae040bf",
	"da3138f6-6403-4ea0-ba2b-c92007753c16",
	'smt',
	"056a9b55-7c4c-45a4-a684-ea45fce8fa86",
	0,
	'',
	"c419a39b-2120-4a47-b639-329417c134ee",
	'');
INSERT INTO S_SPARM
	VALUES ("6cbbd3e0-4a5e-4b3b-92d7-26e148ff6769",
	"da3138f6-6403-4ea0-ba2b-c92007753c16",
	'expr_number',
	"ba5eda7a-def5-0000-0000-000000000004",
	0,
	'',
	"8e403a60-819b-4a3f-8a58-b98a7ae040bf",
	'');
INSERT INTO S_SPARM
	VALUES ("c419a39b-2120-4a47-b639-329417c134ee",
	"da3138f6-6403-4ea0-ba2b-c92007753c16",
	'v_uny',
	"59a775c7-8153-4a74-9471-99ef6c7254a0",
	0,
	'',
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO S_DT_PROXY
	VALUES ("59a775c7-8153-4a74-9471-99ef6c7254a0",
	"00000000-0000-0000-0000-000000000000",
	'inst_ref<Unary Operation>',
	'',
	'',
	'../../../../../mcooa/models/mcooa/ooaofooa/Value/Value.xtuml');
INSERT INTO PE_PE
	VALUES ("da3138f6-6403-4ea0-ba2b-c92007753c16",
	1,
	"c7e18228-e420-4b1e-9c87-113a222b7b0b",
	"00000000-0000-0000-0000-000000000000",
	1);
INSERT INTO S_SYNC
	VALUES ("15b2bb15-4555-487e-8f22-4a83e2161d23",
	"00000000-0000-0000-0000-000000000000",
	'transformBinaryOperation',
	'',
	'v_bin = param.v_bin;
smt = param.smt;
expr_number = param.expr_number;

file = ::getFileForStatement( smt:smt );

// create expression
create object instance expr of Expression;
relate expr to smt across R775;
expr.expression_number = expr_number;

// link type
select one v_val related by v_bin->V_VAL[R801];
select one s_dt related by v_val->S_DT[R820];
select many s_dims from instances of S_DIM where false;
type = TypeReference::getInstance( s_dt:s_dt, s_dims:s_dims );
relate type to expr across R795;

// create the binary expression
create object instance binary of BinaryOperation;
relate binary to expr across R776;
select one l_val related by v_bin->V_VAL[R802];
select one r_val related by v_bin->V_VAL[R803];
select one l_s_dt related by l_val->S_DT[R820];
select one l_type related by l_s_dt->Type[R423];
select one l_set related by l_type->ClassSet[R407];
// translate the operator
binary.invocation = false;
binary.util = false;
if ( "and" == TEMP::sub( format:"l", s:v_bin.Operator ) )
  if ( l_type.primitive() )
    binary.operator = "&&";
  else
    binary.operator = "and";
    binary.invocation = true;
  end if;
elif ( "or" == TEMP::sub( format:"l", s:v_bin.Operator ) )
  if ( l_type.primitive() )
    binary.operator = "||";
  else
    binary.operator = "or";
    binary.invocation = true;
  end if;
elif ( "==" == TEMP::sub( format:"l", s:v_bin.Operator ) )
  if ( l_type.primitive() )
    binary.operator = "==";
  else
    if ( "String" == l_type.name and "" == l_type.package )
      binary.operator = "StringUtil.equality";
      binary.invocation = true;
      binary.util = true;
      ::addStringToImports( file:file, s:"io.ciera.runtime.summit.types.StringUtil", type:ImportType::IMPL );
    else
      binary.operator = "equality";
      binary.invocation = true;
    end if;
  end if;
elif ( "!=" == TEMP::sub( format:"l", s:v_bin.Operator ) )
  if ( l_type.primitive() )
    binary.operator = "!=";
  else
    if ( "String" == l_type.name and "" == l_type.package )
      binary.operator = "StringUtil.inequality";
      binary.invocation = true;
      binary.util = true;
      ::addStringToImports( file:file, s:"io.ciera.runtime.summit.types.StringUtil", type:ImportType::IMPL );
    else
      binary.operator = "inequality";
      binary.invocation = true;
    end if;
  end if;
elif ( "<" == TEMP::sub( format:"l", s:v_bin.Operator ) )
  if ( l_type.primitive() )
    binary.operator = "<";
  else
    if ( "String" == l_type.name and "" == l_type.package )
      binary.operator = "StringUtil.lessThan";
      binary.invocation = true;
      binary.util = true;
      ::addStringToImports( file:file, s:"io.ciera.runtime.summit.types.StringUtil", type:ImportType::IMPL );
    else
      binary.operator = "lessThan";
      binary.invocation = true;
    end if;
  end if;
elif ( "<=" == TEMP::sub( format:"l", s:v_bin.Operator ) )
  if ( l_type.primitive() )
    binary.operator = "<=";
  else
    if ( "String" == l_type.name and "" == l_type.package )
      binary.operator = "StringUtil.lessThanOrEqual";
      binary.invocation = true;
      binary.util = true;
      ::addStringToImports( file:file, s:"io.ciera.runtime.summit.types.StringUtil", type:ImportType::IMPL );
    else
      binary.operator = "lessThanOrEqual";
      binary.invocation = true;
    end if;
  end if;
elif ( ">" == TEMP::sub( format:"l", s:v_bin.Operator ) )
  if ( l_type.primitive() )
    binary.operator = ">";
  else
    if ( "String" == l_type.name and "" == l_type.package )
      binary.operator = "StringUtil.greaterThan";
      binary.invocation = true;
      binary.util = true;
      ::addStringToImports( file:file, s:"io.ciera.runtime.summit.types.StringUtil", type:ImportType::IMPL );
    else
      binary.operator = "greaterThan";
      binary.invocation = true;
    end if;
  end if;
elif ( ">=" == TEMP::sub( format:"l", s:v_bin.Operator ) )
  if ( l_type.primitive() )
    binary.operator = ">=";
  else
    if ( "String" == l_type.name and "" == l_type.package )
      binary.operator = "StringUtil.greaterThanOrEqual";
      binary.invocation = true;
      binary.util = true;
      ::addStringToImports( file:file, s:"io.ciera.runtime.summit.types.StringUtil", type:ImportType::IMPL );
    else
      binary.operator = "greaterThanOrEqual";
      binary.invocation = true;
    end if;
  end if;
elif ( "+" == TEMP::sub( format:"l", s:v_bin.Operator ) )
  if ( l_type.primitive() )
    binary.operator = "+";
  else
    if ( not_empty l_set ) // set type
      binary.operator = "union";
      binary.invocation = true;
    elif ( "String" == l_type.name and "" == l_type.package )
      // TODO handle concatenation for UDTs based on string
      binary.operator = "+";
    else
      binary.operator = "add";
      binary.invocation = true;
    end if;
  end if;
elif ( "-" == TEMP::sub( format:"l", s:v_bin.Operator ) )
  if ( l_type.primitive() )
    binary.operator = "-";
  else
    if ( not_empty l_set ) // set type
      binary.operator = "difference";
    else
      binary.operator = "subtract";
    end if;
    binary.invocation = true;
  end if;
elif ( "*" == TEMP::sub( format:"l", s:v_bin.Operator ) )
  if ( l_type.primitive() )
    binary.operator = "*";
  else
    binary.operator = "multiply";
    binary.invocation = true;
  end if;
elif ( "/" == TEMP::sub( format:"l", s:v_bin.Operator ) )
  if ( l_type.primitive() )
    binary.operator = "/";
  else
    binary.operator = "divide";
    binary.invocation = true;
  end if;
elif ( "%" == TEMP::sub( format:"l", s:v_bin.Operator ) )
  if ( l_type.primitive() )
    binary.operator = "%";
  else
    binary.operator = "remainder";
    binary.invocation = true;
  end if;
elif ( "|" == TEMP::sub( format:"l", s:v_bin.Operator ) )
  binary.operator = "union";
  binary.invocation = true;
elif ( "&" == TEMP::sub( format:"l", s:v_bin.Operator ) )
  binary.operator = "intersection";
  binary.invocation = true;
elif ( "^" == TEMP::sub( format:"l", s:v_bin.Operator ) )
  binary.operator = "disunion";
  binary.invocation = true;
end if;
// translate the left operand
if ( ::precedenceCheck( val1:l_val, val2:v_val ) <= 0 ) // if the left operand is lower precedence than the current operator, force it to be evaluated first with parentheses
  // transform the left hand expression
  ::transformExpression( v_val:l_val, expr_number:expr.expression_number + ".1.1", smt:smt );
  select any paren_expr related by smt->Expression[R775] where ( selected.expression_number == expr.expression_number + ".1.1" );
  // create the parenthesis
  create object instance l_expr of Expression;
  relate l_expr to smt across R775;
  l_expr.expression_number = expr.expression_number + ".1";
  select one l_type_ref related by paren_expr->TypeReference[R795];
  relate l_type_ref to l_expr across R795;
  create object instance l_paren of ParenthesizedExpression;
  relate l_paren to l_expr across R776;
  relate l_expr to binary across R779;
  relate paren_expr to l_paren across R784;
else
  // transform the left hand expression
  ::transformExpression( v_val:l_val, expr_number:expr.expression_number + ".1", smt:smt );
  select any l_expr related by smt->Expression[R775] where ( selected.expression_number == expr.expression_number + ".1" );
  relate l_expr to binary across R779;
end if;
// translate the right operand
if ( ::precedenceCheck( val1:r_val, val2:v_val ) <= 0 ) // if the right operand is lower precedence than the current operator, force it to be evaluated first with parentheses
  // transform the right hand expression
  ::transformExpression( v_val:r_val, expr_number:expr.expression_number + ".2.1", smt:smt );
  select any paren_expr related by smt->Expression[R775] where ( selected.expression_number == expr.expression_number + ".2.1" );
  // create the parenthesis
  create object instance r_expr of Expression;
  relate r_expr to smt across R775;
  r_expr.expression_number = expr.expression_number + ".2";
  select one r_type_ref related by paren_expr->TypeReference[R795];
  relate r_type_ref to r_expr across R795;
  create object instance r_paren of ParenthesizedExpression;
  relate r_paren to r_expr across R776;
  relate r_expr to binary across R778;
  relate paren_expr to r_paren across R784;
else
  // transform the right hand expression
  ::transformExpression( v_val:r_val, expr_number:expr.expression_number + ".2", smt:smt );
  select any r_expr related by smt->Expression[R775] where ( selected.expression_number == expr.expression_number + ".2" );
  relate r_expr to binary across R778;
end if;',
	"ba5eda7a-def5-0000-0000-000000000000",
	1,
	'',
	0);
INSERT INTO S_SPARM
	VALUES ("168fc7c4-9514-4890-b9ef-743f322fba8a",
	"15b2bb15-4555-487e-8f22-4a83e2161d23",
	'smt',
	"056a9b55-7c4c-45a4-a684-ea45fce8fa86",
	0,
	'',
	"eff61dd5-bbf1-472b-8167-459d07a4bf0e",
	'');
INSERT INTO S_SPARM
	VALUES ("567a0779-ac5f-461a-a026-714633f00d02",
	"15b2bb15-4555-487e-8f22-4a83e2161d23",
	'expr_number',
	"ba5eda7a-def5-0000-0000-000000000004",
	0,
	'',
	"168fc7c4-9514-4890-b9ef-743f322fba8a",
	'');
INSERT INTO S_SPARM
	VALUES ("eff61dd5-bbf1-472b-8167-459d07a4bf0e",
	"15b2bb15-4555-487e-8f22-4a83e2161d23",
	'v_bin',
	"146d5fb3-fcd3-4deb-a49c-f516ef703827",
	0,
	'',
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO S_DT_PROXY
	VALUES ("146d5fb3-fcd3-4deb-a49c-f516ef703827",
	"00000000-0000-0000-0000-000000000000",
	'inst_ref<Binary Operation>',
	'',
	'',
	'../../../../../mcooa/models/mcooa/ooaofooa/Value/Value.xtuml');
INSERT INTO PE_PE
	VALUES ("15b2bb15-4555-487e-8f22-4a83e2161d23",
	1,
	"c7e18228-e420-4b1e-9c87-113a222b7b0b",
	"00000000-0000-0000-0000-000000000000",
	1);
INSERT INTO S_SYNC
	VALUES ("c5a7175f-85a4-4c5e-9a19-2337d24b0ade",
	"00000000-0000-0000-0000-000000000000",
	'transformArrayElementReference',
	'',
	'v_aer = param.v_aer;
smt = param.smt;
expr_number = param.expr_number;

// create expression
create object instance expr of Expression;
relate expr to smt across R775;
expr.expression_number = expr_number;

// link type
select one s_dt related by v_aer->V_VAL[R801]->S_DT[R820];
select many s_dims from instances of S_DIM where false;
type = TypeReference::getInstance( s_dt:s_dt, s_dims:s_dims );
relate type to expr across R795;

// transform root expression
select one root_val related by v_aer->V_VAL[R838];
::transformExpression( v_val:root_val, expr_number:expr.expression_number + ".1", smt:smt );
select any root_expr related by smt->Expression[R775] where ( selected.expression_number == expr.expression_number + ".1" );
// transform index expression
select one index_val related by v_aer->V_VAL[R839];
::transformExpression( v_val:index_val, expr_number:expr.expression_number + ".2", smt:smt );
select any index_expr related by smt->Expression[R775] where ( selected.expression_number == expr.expression_number + ".2" );
// create array element reference
create object instance array_ref of ArrayElementReference;
relate array_ref to expr across R776;
relate array_ref to root_expr across R3900;
relate array_ref to index_expr across R3901;',
	"ba5eda7a-def5-0000-0000-000000000000",
	1,
	'',
	0);
INSERT INTO S_SPARM
	VALUES ("f51b71bd-a005-4ee8-845b-8ffd55eff27a",
	"c5a7175f-85a4-4c5e-9a19-2337d24b0ade",
	'smt',
	"056a9b55-7c4c-45a4-a684-ea45fce8fa86",
	0,
	'',
	"b04d9fa0-d799-42fb-a769-45b55a579ca9",
	'');
INSERT INTO S_SPARM
	VALUES ("6e5f9049-222c-42f3-88c7-6afe01ee0090",
	"c5a7175f-85a4-4c5e-9a19-2337d24b0ade",
	'expr_number',
	"ba5eda7a-def5-0000-0000-000000000004",
	0,
	'',
	"f51b71bd-a005-4ee8-845b-8ffd55eff27a",
	'');
INSERT INTO S_SPARM
	VALUES ("b04d9fa0-d799-42fb-a769-45b55a579ca9",
	"c5a7175f-85a4-4c5e-9a19-2337d24b0ade",
	'v_aer',
	"9977b69b-27c5-447e-a1a5-3bf240e3c2d7",
	0,
	'',
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO S_DT_PROXY
	VALUES ("9977b69b-27c5-447e-a1a5-3bf240e3c2d7",
	"00000000-0000-0000-0000-000000000000",
	'inst_ref<Array Element Reference>',
	'',
	'',
	'../../../../../mcooa/models/mcooa/ooaofooa/Value/Value.xtuml');
INSERT INTO PE_PE
	VALUES ("c5a7175f-85a4-4c5e-9a19-2337d24b0ade",
	1,
	"c7e18228-e420-4b1e-9c87-113a222b7b0b",
	"00000000-0000-0000-0000-000000000000",
	1);
INSERT INTO S_SYNC
	VALUES ("2e7b2187-9ae2-4646-9813-911b0df77732",
	"00000000-0000-0000-0000-000000000000",
	'transformExpression',
	'',
	'v_val = param.v_val;
smt = param.smt;
expr_number = param.expr_number;

select one v_lst related by v_val->V_LST[R801];
if ( not_empty v_lst )
  ::transformLiteralString( v_lst:v_lst, smt:smt, expr_number:expr_number );

else
select one v_lbo related by v_val->V_LBO[R801];
if ( not_empty v_lbo )
  ::transformLiteralBoolean( v_lbo:v_lbo, smt:smt, expr_number:expr_number );

else
select one v_lin related by v_val->V_LIN[R801];
if ( not_empty v_lin )
  ::transformLiteralInteger( v_lin:v_lin, smt:smt, expr_number:expr_number );

else
select one v_lrl related by v_val->V_LRL[R801];
if ( not_empty v_lrl )
  ::transformLiteralReal( v_lrl:v_lrl, smt:smt, expr_number:expr_number );

else
select one v_len related by v_val->V_LEN[R801];
if ( not_empty v_len )
  ::transformLiteralEnumerator( v_len:v_len, smt:smt, expr_number:expr_number );

else
select one v_tvl related by v_val->V_TVL[R801];
if ( not_empty v_tvl )
  ::transformTransientValueReference( v_tvl:v_tvl, smt:smt, expr_number:expr_number );

else
select one v_irf related by v_val->V_IRF[R801];
if ( not_empty v_irf )
  ::transformInstanceReference( v_irf:v_irf, smt:smt, expr_number:expr_number );

else
select one v_isr related by v_val->V_ISR[R801];
if ( not_empty v_isr )
  ::transformInstanceSetReference( v_isr:v_isr, smt:smt, expr_number:expr_number );
 
else
select one v_avl related by v_val->V_AVL[R801];
if ( not_empty v_avl )
  ::transformAttributeValueReference( v_avl:v_avl, smt:smt, expr_number:expr_number );
 
else
select one v_pvl related by v_val->V_PVL[R801];
if ( not_empty v_pvl )
  ::transformParameterValue( v_pvl:v_pvl, smt:smt, expr_number:expr_number );

else
select one v_edv related by v_val->V_EDV[R801];
if ( not_empty v_edv )
  ::transformEventDatumValue( v_edv:v_edv, smt:smt, expr_number:expr_number );

else
select one v_brv related by v_val->V_BRV[R801];
if ( not_empty v_brv )
  ::transformBridgeValue( v_brv:v_brv, smt:smt, expr_number:expr_number );

else
select one v_fnv related by v_val->V_FNV[R801];
if ( not_empty v_fnv )
  ::transformFunctionValue( v_fnv:v_fnv, smt:smt, expr_number:expr_number );

else
select one v_trv related by v_val->V_TRV[R801];
if ( not_empty v_trv )
  ::transformOperationValue( v_trv:v_trv, smt:smt, expr_number:expr_number );

else
select one v_slr related by v_val->V_SLR[R801];
if ( not_empty v_slr )
  ::transformSelectedReference( v_slr:v_slr, smt:smt, expr_number:expr_number );

else
select one v_uny related by v_val->V_UNY[R801];
if ( not_empty v_uny )
  ::transformUnaryOperation( v_uny:v_uny, smt:smt, expr_number:expr_number );

else
select one v_bin related by v_val->V_BIN[R801];
if ( not_empty v_bin )
  ::transformBinaryOperation( v_bin:v_bin, smt:smt, expr_number:expr_number );

else
select one v_aer related by v_val->V_AER[R801];
if ( not_empty v_aer )
  ::transformArrayElementReference( v_aer:v_aer, smt:smt, expr_number:expr_number );

else
select one v_scv related by v_val->V_SCV[R801];
if ( not_empty v_scv )
  ::transformConstantReference( v_scv:v_scv, smt:smt, expr_number:expr_number );

else
  LOG::LogInfo( message:"expression type not yet supported" );
end if; end if; end if; end if; end if; end if; end if; end if; end if; end if; end if; end if; end if; end if; end if; end if; end if; end if; end if;',
	"ba5eda7a-def5-0000-0000-000000000000",
	1,
	'',
	0);
INSERT INTO S_SPARM
	VALUES ("013a7f4d-cb96-4fbd-8df7-966c0a03b4b9",
	"2e7b2187-9ae2-4646-9813-911b0df77732",
	'v_val',
	"5400d269-ee31-4742-ac70-8532512a854c",
	0,
	'',
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO S_DT_PROXY
	VALUES ("5400d269-ee31-4742-ac70-8532512a854c",
	"00000000-0000-0000-0000-000000000000",
	'inst_ref<Value>',
	'',
	'',
	'../../../../../mcooa/models/mcooa/ooaofooa/Value/Value.xtuml');
INSERT INTO S_SPARM
	VALUES ("be6c84cf-b2fe-4670-8c35-fa3bc52ba481",
	"2e7b2187-9ae2-4646-9813-911b0df77732",
	'expr_number',
	"ba5eda7a-def5-0000-0000-000000000004",
	0,
	'',
	"013a7f4d-cb96-4fbd-8df7-966c0a03b4b9",
	'');
INSERT INTO S_SPARM
	VALUES ("126b7039-3646-4422-9289-9bb76decc489",
	"2e7b2187-9ae2-4646-9813-911b0df77732",
	'smt',
	"056a9b55-7c4c-45a4-a684-ea45fce8fa86",
	0,
	'',
	"be6c84cf-b2fe-4670-8c35-fa3bc52ba481",
	'');
INSERT INTO PE_PE
	VALUES ("2e7b2187-9ae2-4646-9813-911b0df77732",
	1,
	"c7e18228-e420-4b1e-9c87-113a222b7b0b",
	"00000000-0000-0000-0000-000000000000",
	1);
INSERT INTO S_SYNC
	VALUES ("4c63f881-c368-447f-a162-78cc009d9370",
	"00000000-0000-0000-0000-000000000000",
	'transformConstantReference',
	'',
	'v_scv = param.v_scv;
smt = param.smt;
expr_number = param.expr_number;

// create expression
create object instance expr of Expression;
relate expr to smt across R775;
expr.expression_number = expr_number;

// link type
select one s_dt related by v_scv->V_VAL[R801]->S_DT[R820];
select many s_dims from instances of S_DIM where false;
type = TypeReference::getInstance( s_dt:s_dt, s_dims:s_dims );
relate type to expr across R795;

// create literal
create object instance const_ref of ConstantReference;
relate const_ref to expr across R776;
select one cnst_lsc related by v_scv->CNST_SYC[R850]->CNST_LFSC[R1502]->CNST_LSC[R1503];
const_ref.value = cnst_lsc.Value;',
	"ba5eda7a-def5-0000-0000-000000000000",
	1,
	'',
	0);
INSERT INTO S_SPARM
	VALUES ("6b38c3a8-5051-4844-8bab-cf7bf53ccb14",
	"4c63f881-c368-447f-a162-78cc009d9370",
	'smt',
	"056a9b55-7c4c-45a4-a684-ea45fce8fa86",
	0,
	'',
	"6e53d8d0-fdd0-4f9f-828b-48443e1bcbcb",
	'');
INSERT INTO S_SPARM
	VALUES ("d472b1f8-be2f-4f0c-a5f4-9affef591bf8",
	"4c63f881-c368-447f-a162-78cc009d9370",
	'expr_number',
	"ba5eda7a-def5-0000-0000-000000000004",
	0,
	'',
	"6b38c3a8-5051-4844-8bab-cf7bf53ccb14",
	'');
INSERT INTO S_SPARM
	VALUES ("6e53d8d0-fdd0-4f9f-828b-48443e1bcbcb",
	"4c63f881-c368-447f-a162-78cc009d9370",
	'v_scv',
	"f71ef091-38bf-437f-bf05-dd3d0bbcda6a",
	0,
	'',
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO S_DT_PROXY
	VALUES ("f71ef091-38bf-437f-bf05-dd3d0bbcda6a",
	"00000000-0000-0000-0000-000000000000",
	'inst_ref<Symbolic Constant Value>',
	'',
	'',
	'../../../../../mcooa/models/mcooa/ooaofooa/Value/Value.xtuml');
INSERT INTO PE_PE
	VALUES ("4c63f881-c368-447f-a162-78cc009d9370",
	1,
	"c7e18228-e420-4b1e-9c87-113a222b7b0b",
	"00000000-0000-0000-0000-000000000000",
	1);
INSERT INTO S_SYNC
	VALUES ("f6643aba-6fef-457e-8eaa-28113972a74f",
	"00000000-0000-0000-0000-000000000000",
	'transformEventDatumValue',
	'',
	'v_edv = param.v_edv;
smt = param.smt;
expr_number = param.expr_number;

// create expression
create object instance expr of Expression;
relate expr to smt across R775;
expr.expression_number = expr_number;

// link type
select one s_dt related by v_edv->V_VAL[R801]->S_DT[R820];
select many s_dims from instances of S_DIM where false;
type = TypeReference::getInstance( s_dt:s_dt, s_dims:s_dims );
relate type to expr across R795;

create object instance ref of ParameterReference;
relate ref to expr across R776;
param_name = "";
select any sm_evtdi related by v_edv->V_EPR[R834]->SM_EVTDI[R846];
if ( empty sm_evtdi )
  // TODO bad
  LOG::LogFailure( message:"No event data item found" );
else
  param_name = sm_evtdi.Name;
end if;
select any formal_param related by sm_evtdi->SM_EVT[R532]->Event[R4759]->InvocableObject[R427]->FormalParameter[R429]
  where ( selected.name == "p_" + param_name );
if ( not_empty formal_param )
  relate formal_param to ref across R781;
else
  // TODO bad
  LOG::LogFailure( message:"No formal parameter found" );
end if;',
	"ba5eda7a-def5-0000-0000-000000000000",
	1,
	'',
	0);
INSERT INTO S_SPARM
	VALUES ("66f0d378-14e6-47e6-8c21-57528a0e1e3f",
	"f6643aba-6fef-457e-8eaa-28113972a74f",
	'smt',
	"056a9b55-7c4c-45a4-a684-ea45fce8fa86",
	0,
	'',
	"67465d85-908a-434b-803d-ce557a60c2bb",
	'');
INSERT INTO S_SPARM
	VALUES ("31846f30-a66e-409d-9e30-d349685e90dd",
	"f6643aba-6fef-457e-8eaa-28113972a74f",
	'expr_number',
	"ba5eda7a-def5-0000-0000-000000000004",
	0,
	'',
	"66f0d378-14e6-47e6-8c21-57528a0e1e3f",
	'');
INSERT INTO S_SPARM
	VALUES ("67465d85-908a-434b-803d-ce557a60c2bb",
	"f6643aba-6fef-457e-8eaa-28113972a74f",
	'v_edv',
	"1afb12b7-8ed1-43b4-87c7-b16623b2679a",
	0,
	'',
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO S_DT_PROXY
	VALUES ("1afb12b7-8ed1-43b4-87c7-b16623b2679a",
	"00000000-0000-0000-0000-000000000000",
	'inst_ref<Event Datum Value>',
	'',
	'',
	'../../../../../mcooa/models/mcooa/ooaofooa/Value/Value.xtuml');
INSERT INTO PE_PE
	VALUES ("f6643aba-6fef-457e-8eaa-28113972a74f",
	1,
	"c7e18228-e420-4b1e-9c87-113a222b7b0b",
	"00000000-0000-0000-0000-000000000000",
	1);
INSERT INTO PE_PE
	VALUES ("c7e18228-e420-4b1e-9c87-113a222b7b0b",
	1,
	"06787f13-1c16-4275-879c-00bbeee7cb88",
	"00000000-0000-0000-0000-000000000000",
	7);
INSERT INTO EP_PKG_PROXY
	VALUES ("06787f13-1c16-4275-879c-00bbeee7cb88",
	"aa743d3c-66dc-49df-a19a-ffbadf9c9d1b",
	"aa743d3c-66dc-49df-a19a-ffbadf9c9d1b",
	'transform',
	'',
	0,
	'../transform.xtuml');
INSERT INTO S_SYS_PROXY
	VALUES ("aa743d3c-66dc-49df-a19a-ffbadf9c9d1b",
	'io.ciera.tool.core',
	1,
	'../../io.ciera.tool.core.xtuml');
