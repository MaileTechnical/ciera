-- BP 7.1.6 content: ModelClass syschar: 3 persistence-version: 7.1.6

INSERT INTO O_OBJ
	VALUES ("8f02fe11-ef0d-4fb7-a888-408deb5ae3c8",
	'Message',
	3,
	'Message',
	'Represents a single xtUML interface message.',
	"00000000-0000-0000-0000-000000000000");
INSERT INTO O_TFR
	VALUES ("df440f1c-1f71-4122-82f1-fc71336cf426",
	"8f02fe11-ef0d-4fb7-a888-408deb5ae3c8",
	'render',
	'',
	"ba5eda7a-def5-0000-0000-000000000000",
	1,
	'// Render methods which create instances of Port Messages.
// Note that any parameters of type inst_ref or inst_ref_set must be fully qualified as component-independent.
// Here, make use of the capability necessary to support component-independent parameters for Port Messages.
// (See invocable request for a ''qualified'' parameter list.)
//
// An Interface ''mark'' may specify message parameters be passed as key-value pair strings, rather than an indexed array.
// Additionally, discovery of an inst_ref/set parameter type triggers message serialization.
// Parameter-handling fragments for rendering both mechanisms (array/string) in the template are prepared; 
// the appropriate fragments are then presented to the template, based on serialization consideration.

select any invocable related by self->PortMessage[R420]->InvocableObject[R427];
// Request that any parameters of type inst_ref or inst_ref_set are fully qualified as component-independent.
// Note: no distinguishing prefixing of inst_ref/set parameters is needed when rendering the interface methods.
parameter_list = invocable.parameter_qualified_list( prefix:"" );

// parameters are presented in reverse of declared order; re-order to expected sequence.
select any parm from instances of FormalParameter where false;
select any prev_parm related by invocable->FormalParameter[R429];
while ( not_empty prev_parm )
  parm = prev_parm;
  select one prev_parm related by parm->FormalParameter[R404.''follows''];
end while;

// prepare to build both parameter-handling fragments: one a text string; one a rendered buffer.
pname = "";
addparms = "";
separator = "";
invocation_parameter_list = "";
serialize = false;

T::push_buffer();
while ( not_empty parm )
	// If this parameter is a component-specific type, it is either an instance reference or a set reference;
	// either case requires that the message be serialized.
  select one comp_specific related by parm->TypeReference[R431.''is typed by'']
                                           ->Type[R3800.''based on'']->ComponentSpecificType[R407];
  if ( not_empty comp_specific )
  	serialize = true;
  end if;
  invocation_parameter_list = invocation_parameter_list + separator + parm.name;
  separator = ", ";
  pname = parm.name;
  key = STRING::substr( s:pname, begin:2, end:-1 );
  T::include( file:"interface/t.portmessage.parm.java");
  select one parm related by parm->FormalParameter[R404.''precedes''];
end while;

// select/modify fragments to be passed to template, based on serialize choice.
select one iface related by self->Interface[R419.''defines message format for''];
if ( iface.serialize_msgs ) or ( serialize )
  addparms = T::body();
  invocation_parameter_list = "";
  serialize = true;
end if;
T::pop_buffer();

T::include(file:"interface/t.message.java");',
	1,
	'',
	"00000000-0000-0000-0000-000000000000",
	0,
	0);
INSERT INTO O_TFR
	VALUES ("84ee45b7-7c16-48b1-a413-4c090a90874d",
	"8f02fe11-ef0d-4fb7-a888-408deb5ae3c8",
	'render_msgclass',
	'',
	"ba5eda7a-def5-0000-0000-000000000000",
	1,
	'// Render a Java class that corresponds to a message defined by an interface.
// The member names are derived by stripping the "p_" prefix from the FormalParameter names. @TODO
// For each parameter of the message, render it first as a String data member.
// Then, for each, render the get and set methods.
// Note: method names must be formatted as required by the framework. 
// - Spring requires an upper case character immediately after get/set method prefixes.
// Finally, emit the class definition as a file in the same package as the interface.
// The auxiliary ''messageName'' member support is scripted in the class template.
//

select any invocable related by self->PortMessage[R420]->InvocableObject[R427];
// The following traversal of parameters is matched to message render...
// parameters are presented in reverse of declared order; re-order to expected sequence.
select any parm from instances of FormalParameter where false;
select any prev_parm related by invocable->FormalParameter[R429];
while ( not_empty prev_parm )
  parm = prev_parm;
  select one prev_parm related by parm->FormalParameter[R404.''follows''];
end while;
first_parm = parm;

data_block = "";
code_block = "";
parm_block = "";
parmlist = "";

while ( not_empty parm )
  mname = STRING::substr( s:parm.name, begin:2, end:-1 );
  T::include(file:"interface/t.msgclass.member.java");
  select one parm related by parm->FormalParameter[R404.''precedes''];
end while;
data_block = T::body();
T::clear();

if ( not_empty first_parm )
  parm = first_parm;
  while ( not_empty parm )
	  mname = STRING::substr( s:parm.name, begin:2, end:-1 );
	  parmlist = parmlist + ", String " + mname;
	  T::include(file:"interface/t.msgclass.parm.java");
    select one parm related by parm->FormalParameter[R404.''precedes''];
	end while;
	parm_block = T::body();
	T::clear();

	parm = first_parm;
  while ( not_empty parm )
	  mname = STRING::substr( s:parm.name, begin:2, end:-1 );
	  firstchar = STRING::substr( s:mname, begin:0, end:1 );
	  fname = T::sub( format:"c", s:firstchar ) + STRING::substr( s:mname, begin:1, end:-1 );
	  getm = "get" + fname;
	  setm = "set" + fname;
	  T::include(file:"interface/t.msgclass.methods.java");
    select one parm related by parm->FormalParameter[R404.''precedes''];
	end while;
	code_block = T::body();
end if;
T::clear();

// derive the msgclass package and path from the interface that defines these messages
select one iface related by self->Interface[R419.''defines message format for''];
msgpkg = T::sub( format:"l", s:STRING::substr( s:iface.name, begin:1, end:-1 ));
pkg = iface.package + "." + msgpkg;
T::include(file:"interface/t.msgclass.java");
select one file related by iface->File[R401];
T::emit( file:file.path + "/" + msgpkg + "/" + self.name + "Msg.java" );
T::clear();',
	1,
	'',
	"df440f1c-1f71-4122-82f1-fc71336cf426",
	0,
	1);
INSERT INTO O_NBATTR
	VALUES ("7ad04da4-0d63-47e6-86a4-dfc351516b37",
	"8f02fe11-ef0d-4fb7-a888-408deb5ae3c8");
INSERT INTO O_BATTR
	VALUES ("7ad04da4-0d63-47e6-86a4-dfc351516b37",
	"8f02fe11-ef0d-4fb7-a888-408deb5ae3c8");
INSERT INTO O_ATTR
	VALUES ("7ad04da4-0d63-47e6-86a4-dfc351516b37",
	"8f02fe11-ef0d-4fb7-a888-408deb5ae3c8",
	"a3f839e0-8abe-429b-993c-7ca6ae73995a",
	'to_provider',
	'',
	'',
	'to_provider',
	0,
	"ba5eda7a-def5-0000-0000-000000000001",
	'',
	'');
INSERT INTO O_REF
	VALUES ("8f02fe11-ef0d-4fb7-a888-408deb5ae3c8",
	"26b351ef-ca37-4740-aeff-9c9ed1460938",
	0,
	"2921f1f9-f920-48fc-80e0-c280e48e8e85",
	"27d9ba39-4a24-4d46-a14a-2f1fcce09b16",
	"0c5a063c-24c5-412a-8147-ace7882c4e27",
	"2f54e837-47db-41da-8081-bdbdede16005",
	"053647b7-8a97-4885-9d1d-69b488694718",
	"ff80c64b-198e-4c80-850c-e96f1584187b",
	"00000000-0000-0000-0000-000000000000",
	0,
	'',
	'Iface',
	'name',
	'R419.''defines message format for''');
INSERT INTO R_RGO_PROXY
	VALUES ("8f02fe11-ef0d-4fb7-a888-408deb5ae3c8",
	"27d9ba39-4a24-4d46-a14a-2f1fcce09b16",
	"0c5a063c-24c5-412a-8147-ace7882c4e27",
	'../interfaces.xtuml');
INSERT INTO O_RTIDA_PROXY
	VALUES ("2921f1f9-f920-48fc-80e0-c280e48e8e85",
	"26b351ef-ca37-4740-aeff-9c9ed1460938",
	0,
	"27d9ba39-4a24-4d46-a14a-2f1fcce09b16",
	"2f54e837-47db-41da-8081-bdbdede16005",
	'../interfaces.xtuml');
INSERT INTO O_RATTR
	VALUES ("053647b7-8a97-4885-9d1d-69b488694718",
	"8f02fe11-ef0d-4fb7-a888-408deb5ae3c8",
	"c49819d1-92ba-4732-98e5-2b3eca8bc470",
	"dc9c4877-4fcb-49df-a886-ab917b250774",
	1,
	'name');
INSERT INTO O_BATTR_PROXY
	VALUES ("c49819d1-92ba-4732-98e5-2b3eca8bc470",
	"dc9c4877-4fcb-49df-a886-ab917b250774",
	'../../file/File/File.xtuml');
INSERT INTO O_ATTR
	VALUES ("053647b7-8a97-4885-9d1d-69b488694718",
	"8f02fe11-ef0d-4fb7-a888-408deb5ae3c8",
	"00000000-0000-0000-0000-000000000000",
	'iface_name',
	'',
	'iface_',
	'name',
	1,
	"ba5eda7a-def5-0000-0000-000000000007",
	'',
	'');
INSERT INTO O_REF
	VALUES ("8f02fe11-ef0d-4fb7-a888-408deb5ae3c8",
	"26b351ef-ca37-4740-aeff-9c9ed1460938",
	0,
	"50f706c0-6825-42f0-9079-bd21efa2fda0",
	"27d9ba39-4a24-4d46-a14a-2f1fcce09b16",
	"0c5a063c-24c5-412a-8147-ace7882c4e27",
	"2f54e837-47db-41da-8081-bdbdede16005",
	"a2a994ec-b1c4-4e50-94cb-3fada0a48a58",
	"3ca54fb5-423b-483e-9010-5804fefd95ad",
	"00000000-0000-0000-0000-000000000000",
	0,
	'',
	'Iface',
	'package',
	'R419.''defines message format for''');
INSERT INTO O_RTIDA_PROXY
	VALUES ("50f706c0-6825-42f0-9079-bd21efa2fda0",
	"26b351ef-ca37-4740-aeff-9c9ed1460938",
	0,
	"27d9ba39-4a24-4d46-a14a-2f1fcce09b16",
	"2f54e837-47db-41da-8081-bdbdede16005",
	'../interfaces.xtuml');
INSERT INTO O_RATTR
	VALUES ("a2a994ec-b1c4-4e50-94cb-3fada0a48a58",
	"8f02fe11-ef0d-4fb7-a888-408deb5ae3c8",
	"3dfc4c02-94c0-4383-8964-c3bfa4b2e9bd",
	"dc9c4877-4fcb-49df-a886-ab917b250774",
	1,
	'package');
INSERT INTO O_BATTR_PROXY
	VALUES ("3dfc4c02-94c0-4383-8964-c3bfa4b2e9bd",
	"dc9c4877-4fcb-49df-a886-ab917b250774",
	'../../file/File/File.xtuml');
INSERT INTO O_ATTR
	VALUES ("a2a994ec-b1c4-4e50-94cb-3fada0a48a58",
	"8f02fe11-ef0d-4fb7-a888-408deb5ae3c8",
	"053647b7-8a97-4885-9d1d-69b488694718",
	'iface_package',
	'',
	'iface_',
	'package',
	1,
	"ba5eda7a-def5-0000-0000-000000000007",
	'',
	'');
INSERT INTO O_NBATTR
	VALUES ("a3f839e0-8abe-429b-993c-7ca6ae73995a",
	"8f02fe11-ef0d-4fb7-a888-408deb5ae3c8");
INSERT INTO O_BATTR
	VALUES ("a3f839e0-8abe-429b-993c-7ca6ae73995a",
	"8f02fe11-ef0d-4fb7-a888-408deb5ae3c8");
INSERT INTO O_ATTR
	VALUES ("a3f839e0-8abe-429b-993c-7ca6ae73995a",
	"8f02fe11-ef0d-4fb7-a888-408deb5ae3c8",
	"a2a994ec-b1c4-4e50-94cb-3fada0a48a58",
	'name',
	'',
	'',
	'name',
	0,
	"ba5eda7a-def5-0000-0000-000000000004",
	'',
	'');
INSERT INTO O_NBATTR
	VALUES ("536e05c6-df8c-4f0f-8076-7e785a384f58",
	"8f02fe11-ef0d-4fb7-a888-408deb5ae3c8");
INSERT INTO O_BATTR
	VALUES ("536e05c6-df8c-4f0f-8076-7e785a384f58",
	"8f02fe11-ef0d-4fb7-a888-408deb5ae3c8");
INSERT INTO O_ATTR
	VALUES ("536e05c6-df8c-4f0f-8076-7e785a384f58",
	"8f02fe11-ef0d-4fb7-a888-408deb5ae3c8",
	"7ad04da4-0d63-47e6-86a4-dfc351516b37",
	'id',
	'',
	'',
	'id',
	0,
	"ba5eda7a-def5-0000-0000-000000000002",
	'',
	'');
INSERT INTO O_ID
	VALUES (0,
	"8f02fe11-ef0d-4fb7-a888-408deb5ae3c8");
INSERT INTO O_OIDA
	VALUES ("053647b7-8a97-4885-9d1d-69b488694718",
	"8f02fe11-ef0d-4fb7-a888-408deb5ae3c8",
	0,
	'iface_name');
INSERT INTO O_OIDA
	VALUES ("a2a994ec-b1c4-4e50-94cb-3fada0a48a58",
	"8f02fe11-ef0d-4fb7-a888-408deb5ae3c8",
	0,
	'iface_package');
INSERT INTO O_OIDA
	VALUES ("a3f839e0-8abe-429b-993c-7ca6ae73995a",
	"8f02fe11-ef0d-4fb7-a888-408deb5ae3c8",
	0,
	'name');
INSERT INTO O_ID
	VALUES (1,
	"8f02fe11-ef0d-4fb7-a888-408deb5ae3c8");
INSERT INTO O_ID
	VALUES (2,
	"8f02fe11-ef0d-4fb7-a888-408deb5ae3c8");
INSERT INTO PE_PE
	VALUES ("8f02fe11-ef0d-4fb7-a888-408deb5ae3c8",
	1,
	"034a6dc6-ed87-4d18-8620-a825db8eaa7b",
	"00000000-0000-0000-0000-000000000000",
	4);
INSERT INTO EP_PKG_PROXY
	VALUES ("034a6dc6-ed87-4d18-8620-a825db8eaa7b",
	"00000000-0000-0000-0000-000000000000",
	"9092a4a9-91f5-4e59-984b-3ca72917240d",
	'interfaces',
	'Interfaces support passing instances and sets of instances as parameters on Port Messages.
Where commmunicating components are represented by xtUML models, this is only practical 
because components share component independent definitions of classes - and, therefore, 
sets of class instances - through the Package Reference mechanism.

While shared attribute, association and state model definitions of such classes are immutable,
within xtUML components, shared classes may participate in component-specific associations.

Since each component-specific class interface includes methods for all associations -
including component-specific ones - in which the class participates, each method representing 
an inter-component message must use component-independent interfaces to declare inst_ref and 
inst_ref_set parameters. Therefore, methods realizing port-message activities must also use 
component-independent interfaces when declaring such parameters which are then down-cast to 
the receiving-component-specific class or class set required by the body of the port-message 
activity.
',
	0,
	'../interfaces.xtuml');
