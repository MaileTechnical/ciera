-- BP 7.1.6 content: Package syschar: 3 persistence-version: 7.1.6

INSERT INTO EP_PKG
	VALUES ("65dec46c-ec8b-4464-b227-a7853cadd3b4",
	"1ed94c5d-00b5-463e-a399-41e45b7a60ea",
	"1ed94c5d-00b5-463e-a399-41e45b7a60ea",
	'translation_uitlity_functions',
	'',
	0);
INSERT INTO S_SYNC
	VALUES ("c88d4df1-267c-4c7b-9093-c5cef65e913f",
	"00000000-0000-0000-0000-000000000000",
	'camelCaseName',
	'',
	'name = param.name;
underscore_index = STR::indexof( haystack:name, needle:"_" );
while ( -1 != underscore_index )
  left = STR::substr( s:name, begin:0, end:underscore_index );
  right = STR::substr( s:name, begin:underscore_index + 1, end:-1 );
  name = left + "  " + right;
  underscore_index = STR::indexof( haystack:name, needle:"_" );
end while;
name = T::c( s:name );
dblspc_index = STR::indexof( haystack:name, needle:"  " );
while ( -1 != dblspc_index )
  left = STR::substr( s:name, begin:0, end:dblspc_index );
  right = STR::substr( s:name, begin:dblspc_index + 1, end:-1 );
  name = left + "_" + right;
  dblspc_index = STR::indexof( haystack:name, needle:"  " );
end while;
return T::r( s:name );
// TODO make sure already camel cased does not get destroyed',
	"ba5eda7a-def5-0000-0000-000000000004",
	1,
	'',
	0);
INSERT INTO S_SPARM
	VALUES ("7983a102-40c5-4c6f-9a0a-26e987abb364",
	"c88d4df1-267c-4c7b-9093-c5cef65e913f",
	'name',
	"ba5eda7a-def5-0000-0000-000000000004",
	0,
	'',
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO S_SPARM
	VALUES ("47f5a9c8-73d1-4edf-86a1-d0688f882b98",
	"c88d4df1-267c-4c7b-9093-c5cef65e913f",
	'start_lower',
	"ba5eda7a-def5-0000-0000-000000000001",
	0,
	'',
	"7983a102-40c5-4c6f-9a0a-26e987abb364",
	'');
INSERT INTO PE_PE
	VALUES ("c88d4df1-267c-4c7b-9093-c5cef65e913f",
	1,
	"65dec46c-ec8b-4464-b227-a7853cadd3b4",
	"00000000-0000-0000-0000-000000000000",
	1);
INSERT INTO S_SYNC
	VALUES ("ebdd1f8c-ecaa-4cce-b0ad-d5f692094def",
	"00000000-0000-0000-0000-000000000000",
	'pathToPackage',
	'',
	's = param.path;
slash_index = STR::indexof( haystack:s, needle:"/" );
while ( -1 != slash_index )
  left = STR::substr( s:s, begin:0, end:slash_index );
  right = STR::substr( s:s, begin:slash_index + 1, end:-1 );
  s = left + "." + right;
  slash_index = STR::indexof( haystack:s, needle:"/" );
end while;
return s;',
	"ba5eda7a-def5-0000-0000-000000000004",
	1,
	'',
	0);
INSERT INTO S_SPARM
	VALUES ("eab2164e-974f-4448-9552-2c45c05b0023",
	"ebdd1f8c-ecaa-4cce-b0ad-d5f692094def",
	'path',
	"ba5eda7a-def5-0000-0000-000000000004",
	0,
	'',
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO PE_PE
	VALUES ("ebdd1f8c-ecaa-4cce-b0ad-d5f692094def",
	1,
	"65dec46c-ec8b-4464-b227-a7853cadd3b4",
	"00000000-0000-0000-0000-000000000000",
	1);
INSERT INTO S_SYNC
	VALUES ("b97081ab-e134-4d0c-a001-bc82f0f27b1b",
	"00000000-0000-0000-0000-000000000000",
	'ep_pkgToPath',
	'',
	'ep_pkg = param.ep_pkg;
path = T::l( s:T::r( s:ep_pkg.Name ) );
select one containing_ep_pkg related by ep_pkg->PE_PE[R8001]->EP_PKG[R8000];
if ( not_empty containing_ep_pkg )
  path = ::ep_pkgToPath( ep_pkg:containing_ep_pkg ) + "/" + path;
else
  select one containing_c_c related by ep_pkg->PE_PE[R8001]->C_C[R8003];
  if ( not_empty containing_c_c )
    path = ::c_cToPath( c_c:containing_c_c ) + "/" + path;
  end if;
end if;
return path;',
	"ba5eda7a-def5-0000-0000-000000000004",
	1,
	'',
	0);
INSERT INTO S_SPARM
	VALUES ("16af8234-8c24-4d27-9748-0578664eaf22",
	"b97081ab-e134-4d0c-a001-bc82f0f27b1b",
	'ep_pkg',
	"9939c670-a721-4742-a824-ed4b0df4acd6",
	0,
	'',
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO S_DT_PROXY
	VALUES ("9939c670-a721-4742-a824-ed4b0df4acd6",
	"00000000-0000-0000-0000-000000000000",
	'inst_ref<Package>',
	'',
	'',
	'../../../../mcooa/models/mcooa/ooaofooa/Element Packaging/Element Packaging.xtuml');
INSERT INTO PE_PE
	VALUES ("b97081ab-e134-4d0c-a001-bc82f0f27b1b",
	1,
	"65dec46c-ec8b-4464-b227-a7853cadd3b4",
	"00000000-0000-0000-0000-000000000000",
	1);
INSERT INTO S_SYNC
	VALUES ("f9c7c4dc-038d-469d-b851-a0969d642c72",
	"00000000-0000-0000-0000-000000000000",
	'c_cToPath',
	'',
	'c_c = param.c_c;
path = T::l( s:T::r( s:c_c.Name ) );
select one containing_ep_pkg related by c_c->PE_PE[R8001]->EP_PKG[R8000];
if ( not_empty containing_ep_pkg )
  path = ::ep_pkgToPath( ep_pkg:containing_ep_pkg ) + "/" + path;
else
  select one containing_c_c related by c_c->PE_PE[R8001]->C_C[R8003];
  if ( not_empty containing_c_c )
    path = ::c_cToPath( c_c:containing_c_c ) + "/" + path;
  end if;
end if;
return path;',
	"ba5eda7a-def5-0000-0000-000000000004",
	1,
	'',
	0);
INSERT INTO S_SPARM
	VALUES ("97608e01-2875-46c2-8653-ea6c96bb290b",
	"f9c7c4dc-038d-469d-b851-a0969d642c72",
	'c_c',
	"67f93d18-1045-4c6c-b0d5-a692023c471c",
	0,
	'',
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO S_DT_PROXY
	VALUES ("67f93d18-1045-4c6c-b0d5-a692023c471c",
	"00000000-0000-0000-0000-000000000000",
	'inst_ref<Component>',
	'',
	'',
	'../../../../mcooa/models/mcooa/ooaofooa/Component/Component.xtuml');
INSERT INTO PE_PE
	VALUES ("f9c7c4dc-038d-469d-b851-a0969d642c72",
	1,
	"65dec46c-ec8b-4464-b227-a7853cadd3b4",
	"00000000-0000-0000-0000-000000000000",
	1);
INSERT INTO S_SYNC
	VALUES ("4e285295-4ea7-482a-8d47-1fea832b5b27",
	"00000000-0000-0000-0000-000000000000",
	's_dtIsBuiltin',
	'',
	's_dt = param.s_dt;
// builtin types have not containing package or component
select one c_c related by s_dt->PE_PE[R8001]->C_C[R8003];
select one ep_pkg related by s_dt->PE_PE[R8001]->EP_PKG[R8000];
return ( empty c_c and empty ep_pkg );',
	"ba5eda7a-def5-0000-0000-000000000001",
	1,
	'',
	0);
INSERT INTO S_SPARM
	VALUES ("6ab42c37-5f74-4f41-ba5d-9e3c832a95e5",
	"4e285295-4ea7-482a-8d47-1fea832b5b27",
	's_dt',
	"4a90cd45-ece0-4e72-afe7-44996f9d7e1e",
	0,
	'',
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO S_DT_PROXY
	VALUES ("4a90cd45-ece0-4e72-afe7-44996f9d7e1e",
	"00000000-0000-0000-0000-000000000000",
	'inst_ref<Data Type>',
	'',
	'',
	'../../../../mcooa/models/mcooa/ooaofooa/Domain/Domain.xtuml');
INSERT INTO PE_PE
	VALUES ("4e285295-4ea7-482a-8d47-1fea832b5b27",
	1,
	"65dec46c-ec8b-4464-b227-a7853cadd3b4",
	"00000000-0000-0000-0000-000000000000",
	1);
INSERT INTO S_SYNC
	VALUES ("41efa205-a6ab-412d-a8c9-a42846dc0ffc",
	"00000000-0000-0000-0000-000000000000",
	'r_rel_is_formal',
	'',
	'r_rel = param.r_rel;
select one simp related by r_rel->R_SIMP[R206];
if ( not_empty simp )
  select one form related by simp->R_FORM[R208];
  if ( not_empty form )
    return true;
  end if;
else
  select one assoc related by r_rel->R_ASSOC[R206];
  if ( not_empty assoc )
    select one rto1 related by assoc->R_AONE[R209]->R_RTO[R204];
    select any rtida1 related by rto1->O_RTIDA[R110];
    select one rto2 related by assoc->R_AOTH[R210]->R_RTO[R204];
    select any rtida2 related by rto2->O_RTIDA[R110];
    return not_empty rtida1 and not_empty rtida2;
  else
    select one subsup related by r_rel->R_SUBSUP[R206];
    if ( not_empty subsup )
      select one rto related by subsup->R_SUPER[R212]->R_RTO[R204];
      select any rtida related by rto->O_RTIDA[R110];
      return not_empty rtida;
    end if;
  end if;
end if;
return false;',
	"ba5eda7a-def5-0000-0000-000000000001",
	1,
	'',
	0);
INSERT INTO S_SPARM
	VALUES ("8f8fee83-ef8b-41f8-a211-0780e3a3d121",
	"41efa205-a6ab-412d-a8c9-a42846dc0ffc",
	'r_rel',
	"4480b008-8c74-4f57-9256-08b7365520bc",
	0,
	'',
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO S_DT_PROXY
	VALUES ("4480b008-8c74-4f57-9256-08b7365520bc",
	"00000000-0000-0000-0000-000000000000",
	'inst_ref<Association>',
	'',
	'',
	'../../../../mcooa/models/mcooa/ooaofooa/Association/Association.xtuml');
INSERT INTO PE_PE
	VALUES ("41efa205-a6ab-412d-a8c9-a42846dc0ffc",
	1,
	"65dec46c-ec8b-4464-b227-a7853cadd3b4",
	"00000000-0000-0000-0000-000000000000",
	1);
INSERT INTO S_SYNC
	VALUES ("eef3919f-d649-464f-8fdf-403f36e1a626",
	"00000000-0000-0000-0000-000000000000",
	'r_rel_is_reflexive',
	'',
	'r_rel = param.r_rel;
select one srel related by r_rel->R_SIMP[R206];
if ( not_empty srel )
  select many part_set related by srel->R_PART[R207];
  if ( cardinality part_set > 1 )
    select any part1 related by srel->R_PART[R207];
    select any part2 related by srel->R_PART[R207]
      where selected.OIR_ID != part1.OIR_ID;
    if ( part1.Obj_ID == part2.Obj_ID )
      return true;
    end if;
  else
    select any part related by srel->R_PART[R207];
    select one form related by srel->R_FORM[R208];
    if ( not_empty form )
      if ( part.Obj_ID == form.Obj_ID )
        return true;
      end if;
    end if;
  end if;
else
  select one arel related by r_rel->R_ASSOC[R206];
  if ( not_empty arel )
    select one aone related by arel->R_AONE[R209];
    select one aoth related by arel->R_AOTH[R210];
    if ( aone.Obj_ID == aoth.Obj_ID )
      return true;
    end if;
  end if;
end if;
return false;',
	"ba5eda7a-def5-0000-0000-000000000001",
	1,
	'',
	0);
INSERT INTO S_SPARM
	VALUES ("641d0430-1ae1-4926-8811-b9e88ecae4b5",
	"eef3919f-d649-464f-8fdf-403f36e1a626",
	'r_rel',
	"4480b008-8c74-4f57-9256-08b7365520bc",
	0,
	'',
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO PE_PE
	VALUES ("eef3919f-d649-464f-8fdf-403f36e1a626",
	1,
	"65dec46c-ec8b-4464-b227-a7853cadd3b4",
	"00000000-0000-0000-0000-000000000000",
	1);
INSERT INTO S_SYNC
	VALUES ("bfe0ba14-5516-41e9-9953-ffbf536c26ca",
	"00000000-0000-0000-0000-000000000000",
	'oirGetPhrase',
	'',
	'select any r_oir from instances of R_OIR where ( selected.OIR_ID == param.r_oir_id );
phrase = "";
select one r_part related by r_oir->R_RTO[R203]->R_PART[R204];
if ( not_empty r_part )
  phrase = r_part.Txt_Phrs;
else
select one r_form related by r_oir->R_RGO[R203]->R_FORM[R205];
if ( not_empty r_form )
  phrase = r_form.Txt_Phrs;
else
select one r_aone related by r_oir->R_RTO[R203]->R_AONE[R204];
if ( not_empty r_aone )
  phrase = r_aone.Txt_Phrs;
else
select one r_aoth related by r_oir->R_RTO[R203]->R_AOTH[R204];
if ( not_empty r_aoth )
  phrase = r_aoth.Txt_Phrs;
else
select one r_sub related by r_oir->R_RGO[R203]->R_SUB[R205];
select one r_super related by r_oir->R_RTO[R203]->R_SUPER[R204];
if ( not_empty r_sub or not_empty r_super )
  phrase = "is_a";
end if; end if; end if; end if; end if;
return phrase;',
	"ba5eda7a-def5-0000-0000-000000000004",
	1,
	'',
	0);
INSERT INTO S_SPARM
	VALUES ("b6fa1c16-12ed-4a37-8e66-5555a1b945b6",
	"bfe0ba14-5516-41e9-9953-ffbf536c26ca",
	'r_oir_id',
	"ba5eda7a-def5-0000-0000-000000000005",
	0,
	'',
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO PE_PE
	VALUES ("bfe0ba14-5516-41e9-9953-ffbf536c26ca",
	1,
	"65dec46c-ec8b-4464-b227-a7853cadd3b4",
	"00000000-0000-0000-0000-000000000000",
	1);
INSERT INTO S_SYNC
	VALUES ("e656d8d1-f462-4839-b559-dde2305fb891",
	"00000000-0000-0000-0000-000000000000",
	'containerMarkingPath',
	'',
	'pe = param.pe;
path = "";
select one ep_pkg related by pe->EP_PKG[R8000];
if ( not_empty ep_pkg )
  path = ep_pkg.Name;
else
  select one c_c related by pe->C_C[R8003];
  if ( not_empty c_c )
    path = c_c.Name;
  end if;
end if;
select one containing_pe related by pe->EP_PKG[R8000]->PE_PE[R8001];
if ( empty containing_pe )
  select one containing_pe related by pe->C_C[R8003]->PE_PE[R8001];
end if;
if ( not_empty containing_pe )
  return ::containerMarkingPath( pe:containing_pe ) + "::" + path;
else
  return path;
end if;',
	"ba5eda7a-def5-0000-0000-000000000004",
	1,
	'',
	0);
INSERT INTO S_SPARM
	VALUES ("7bbbee75-a42d-4bd2-8ac8-ad625e419e96",
	"e656d8d1-f462-4839-b559-dde2305fb891",
	'pe',
	"e988e223-9ca4-4b6f-a675-001eefe3aa24",
	0,
	'',
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO S_DT_PROXY
	VALUES ("e988e223-9ca4-4b6f-a675-001eefe3aa24",
	"00000000-0000-0000-0000-000000000000",
	'inst_ref<Packageable Element>',
	'',
	'',
	'../../../../mcooa/models/mcooa/ooaofooa/Packageable Element/Packageable Element.xtuml');
INSERT INTO PE_PE
	VALUES ("e656d8d1-f462-4839-b559-dde2305fb891",
	1,
	"65dec46c-ec8b-4464-b227-a7853cadd3b4",
	"00000000-0000-0000-0000-000000000000",
	1);
INSERT INTO S_SYNC
	VALUES ("b4f44b41-e3a3-47f4-b420-c665fd4b47ec",
	"00000000-0000-0000-0000-000000000000",
	'getOalStatement',
	'',
	'// TODO this routine assumes a statement is only one line long

body = param.body;
line_num = param.line_num;

i = 0;
line = "";
while ( i < line_num )
  end_of_line = STR::indexof( haystack:body, needle:"\n" );
  if ( -1 != end_of_line )
    line = STR::substr( s:body, begin:0, end:end_of_line );
    body = STR::substr( s:body, begin:end_of_line+1, end:-1 );
  else
    line = body;
    break;
  end if;
  i = i + 1;
end while;

return STR::trim( s:line );',
	"ba5eda7a-def5-0000-0000-000000000004",
	1,
	'',
	0);
INSERT INTO S_SPARM
	VALUES ("33d3aca4-7f12-48f0-99fe-9f6f93f91c03",
	"b4f44b41-e3a3-47f4-b420-c665fd4b47ec",
	'body',
	"ba5eda7a-def5-0000-0000-000000000004",
	0,
	'',
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO S_SPARM
	VALUES ("f99d2ecd-8a65-479d-aaf3-8ed93e11f360",
	"b4f44b41-e3a3-47f4-b420-c665fd4b47ec",
	'line_num',
	"ba5eda7a-def5-0000-0000-000000000002",
	0,
	'',
	"33d3aca4-7f12-48f0-99fe-9f6f93f91c03",
	'');
INSERT INTO PE_PE
	VALUES ("b4f44b41-e3a3-47f4-b420-c665fd4b47ec",
	1,
	"65dec46c-ec8b-4464-b227-a7853cadd3b4",
	"00000000-0000-0000-0000-000000000000",
	1);
INSERT INTO S_SYNC
	VALUES ("7477ef1c-0e32-4619-b3c4-829d006c04ad",
	"00000000-0000-0000-0000-000000000000",
	'getIndent',
	'',
	'select any tab_width_mark from instances of Mark where ( selected.markable_name == "*" and selected.path == "*" and selected.feature_name == "TabWidth" );
indent = "";
default_tab_width = 4;
tab_width = 0;
if ( not_empty tab_width_mark )
  tab_width = STR::atoi( s:tab_width_mark.value );
else
  tab_width = default_tab_width;
end if;
i = 0;
while ( i < param.tab_depth )
  j = 0;
  while ( j < tab_width )
    indent = indent + " ";
    j = j + 1;
  end while;
  i = i + 1;
end while;
return indent;',
	"ba5eda7a-def5-0000-0000-000000000004",
	1,
	'',
	0);
INSERT INTO S_SPARM
	VALUES ("1224b7b5-f2fe-42aa-bc11-fb5adeac9421",
	"7477ef1c-0e32-4619-b3c4-829d006c04ad",
	'tab_depth',
	"ba5eda7a-def5-0000-0000-000000000002",
	0,
	'',
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO PE_PE
	VALUES ("7477ef1c-0e32-4619-b3c4-829d006c04ad",
	1,
	"65dec46c-ec8b-4464-b227-a7853cadd3b4",
	"00000000-0000-0000-0000-000000000000",
	1);
INSERT INTO S_SYNC
	VALUES ("c2071112-3984-41bc-a1b1-dd19a6421a23",
	"00000000-0000-0000-0000-000000000000",
	'getInstRefTypeForClass',
	'',
	's_dt = param.s_dt;
o_obj = param.o_obj;
if ( not_empty s_dt and not_empty o_obj )
  if ( "inst_ref<Object>" == s_dt.Name )
    select any s_irdt related by o_obj->S_IRDT[R123] where ( not selected.isSet );
    select one s_dt related by s_irdt->S_DT[R17];
  elif ( "inst_ref_set<Object>" == s_dt.Name )
    select any s_irdt related by o_obj->S_IRDT[R123] where ( selected.isSet );
    select one s_dt related by s_irdt->S_DT[R17];
  end if;
end if;
return s_dt;',
	"4a90cd45-ece0-4e72-afe7-44996f9d7e1e",
	1,
	'',
	0);
INSERT INTO S_SPARM
	VALUES ("4e62ce55-e8f5-4fcc-9cd4-c737243c4f04",
	"c2071112-3984-41bc-a1b1-dd19a6421a23",
	's_dt',
	"4a90cd45-ece0-4e72-afe7-44996f9d7e1e",
	0,
	'',
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO S_SPARM
	VALUES ("735b9167-de25-4be6-8ad8-e68bf35ea41f",
	"c2071112-3984-41bc-a1b1-dd19a6421a23",
	'o_obj',
	"63f4ff99-f127-443b-a678-30ace41da702",
	0,
	'',
	"4e62ce55-e8f5-4fcc-9cd4-c737243c4f04",
	'');
INSERT INTO S_DT_PROXY
	VALUES ("63f4ff99-f127-443b-a678-30ace41da702",
	"00000000-0000-0000-0000-000000000000",
	'inst_ref<Model Class>',
	'',
	'',
	'../../../../mcooa/models/mcooa/ooaofooa/Subsystem/Subsystem.xtuml');
INSERT INTO PE_PE
	VALUES ("c2071112-3984-41bc-a1b1-dd19a6421a23",
	1,
	"65dec46c-ec8b-4464-b227-a7853cadd3b4",
	"00000000-0000-0000-0000-000000000000",
	1);
INSERT INTO S_SYNC
	VALUES ("41d15215-c287-4164-8ef3-f8a7d2867b18",
	"00000000-0000-0000-0000-000000000000",
	'precedenceCheck',
	'',
	'// returns < 0 if op1 is lower precedence than op2
// returns > 0 if op1 is greater precedence than op2
// returns 0 if op1 is the same precedence than op2

// | Operator Precedence                                              |        |
// | Operator(s)                   | Description                      | Number |
// |-------------------------------|----------------------------------|--------|
// | primary expression            | atomic value                     | 7      |
// | cardinality, empty, not_empty | instance reference and set tests | 6      |
// | not , -                       | negation                         | 5      |
// | * , / , % , & , ^             | multiplicative operation         | 4      |
// | + , - , |                     | additive operation               | 3      |
// | == , != , < , > , <= , >=     | comparison operation             | 2      |
// | and                           | logical conjunction              | 1      |
// | or                            | logical disjunction              | 0      |


val1 = param.val1;
val2 = param.val2;

prec1 = 7;
prec2 = 7;

i = 0;
while i < 2
  prec = 7;
  val = val1;
  if ( i != 0 )
    val = val2;
  end if;
  select one v_uny related by val->V_UNY[R801];
  if ( not_empty v_uny )
    if ( ( "cardinality" == T::l( s:v_uny.Operator ) ) or ( "empty" == T::l( s:v_uny.Operator ) ) or ( "not_empty" == T::l( s:v_uny.Operator ) ) )
      prec = 6;
    elif ( ( "not" == T::l( s:v_uny.Operator ) ) or ( "-" == v_uny.Operator ) or ( "+" == v_uny.Operator ) )
      prec = 5;
    end if;
  else
    select one v_bin related by val->V_BIN[R801];
    if ( not_empty v_bin )
      if ( ( "*" == v_bin.Operator ) or ( "/" == v_bin.Operator ) or ( "%" == v_bin.Operator ) or ( "&" == v_bin.Operator ) or ( "^" == v_bin.Operator ) )
        prec = 4;
      elif ( ( "+" == v_bin.Operator ) or ( "-" == v_bin.Operator ) or ( "|" == v_bin.Operator ) )
        prec = 3;
      elif ( ( "==" == v_bin.Operator ) or ( "!=" == v_bin.Operator ) or ( "<" == v_bin.Operator ) or ( ">" == v_bin.Operator ) or ( "<=" == v_bin.Operator ) or ( ">=" == v_bin.Operator ) )
        prec = 2;
      elif ( "and" == T::l( s:v_bin.Operator ) )
        prec = 1;
      elif ( "or" == T::l( s:v_bin.Operator ) )
        prec = 0;
      end if;
    end if;
  end if;
  if ( i == 0 )
    prec1 = prec;
  else
    prec2 = prec;
  end if;
  i = i + 1;
end while;

return prec1 - prec2;',
	"ba5eda7a-def5-0000-0000-000000000002",
	1,
	'',
	0);
INSERT INTO S_SPARM
	VALUES ("2b0d7524-0958-47dc-9174-13806fa20cf5",
	"41d15215-c287-4164-8ef3-f8a7d2867b18",
	'val1',
	"5400d269-ee31-4742-ac70-8532512a854c",
	0,
	'',
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO S_DT_PROXY
	VALUES ("5400d269-ee31-4742-ac70-8532512a854c",
	"00000000-0000-0000-0000-000000000000",
	'inst_ref<Value>',
	'',
	'',
	'../../../../mcooa/models/mcooa/ooaofooa/Value/Value.xtuml');
INSERT INTO S_SPARM
	VALUES ("5c8dff4c-d91e-4604-8872-320acfa6fa7d",
	"41d15215-c287-4164-8ef3-f8a7d2867b18",
	'val2',
	"5400d269-ee31-4742-ac70-8532512a854c",
	0,
	'',
	"2b0d7524-0958-47dc-9174-13806fa20cf5",
	'');
INSERT INTO PE_PE
	VALUES ("41d15215-c287-4164-8ef3-f8a7d2867b18",
	1,
	"65dec46c-ec8b-4464-b227-a7853cadd3b4",
	"00000000-0000-0000-0000-000000000000",
	1);
INSERT INTO S_SYNC
	VALUES ("34223842-7cfa-4078-83b7-d8e3eecda0ce",
	"00000000-0000-0000-0000-000000000000",
	'getUDTCoreType',
	'',
	's_udt = param.s_udt;
select any s_dt from instances of S_DT where false;
if ( not_empty s_udt )
  select one s_dt related by s_udt->S_DT[R18];
  select one base_udt related by s_dt->S_UDT[R17];
  if ( not_empty base_udt )
    return ::getUDTCoreType( s_udt:base_udt );
  end if;
end if;
return s_dt;',
	"4a90cd45-ece0-4e72-afe7-44996f9d7e1e",
	1,
	'',
	0);
INSERT INTO S_SPARM
	VALUES ("6e3aad5b-e3a9-4d36-9d0d-215446ae83fe",
	"34223842-7cfa-4078-83b7-d8e3eecda0ce",
	's_udt',
	"587d8963-4757-4426-bc18-b235bcbd7937",
	0,
	'',
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO S_DT_PROXY
	VALUES ("587d8963-4757-4426-bc18-b235bcbd7937",
	"00000000-0000-0000-0000-000000000000",
	'inst_ref<User Data Type>',
	'',
	'',
	'../../../../mcooa/models/mcooa/ooaofooa/Domain/Domain.xtuml');
INSERT INTO PE_PE
	VALUES ("34223842-7cfa-4078-83b7-d8e3eecda0ce",
	1,
	"65dec46c-ec8b-4464-b227-a7853cadd3b4",
	"00000000-0000-0000-0000-000000000000",
	1);
INSERT INTO S_SYNC
	VALUES ("50d39e2d-f5ce-4a7a-bb28-7b5db96d9f12",
	"00000000-0000-0000-0000-000000000000",
	'addFileToImports',
	'',
	'file_to_import = param.file_to_import;
import_string = ::pathToPackage( path:file_to_import.path ) + "." + file_to_import.name;
::addStringToImports( file:param.file, s:import_string, type:param.type );',
	"ba5eda7a-def5-0000-0000-000000000000",
	1,
	'',
	0);
INSERT INTO S_SPARM
	VALUES ("13b80b56-f130-4bc8-8b9c-5a7f544f29ed",
	"50d39e2d-f5ce-4a7a-bb28-7b5db96d9f12",
	'file',
	"7f1815c6-b9da-4371-acbc-8297d9eaecf4",
	0,
	'',
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO S_DT_PROXY
	VALUES ("7f1815c6-b9da-4371-acbc-8297d9eaecf4",
	"00000000-0000-0000-0000-000000000000",
	'inst_ref<File>',
	'',
	'',
	'../../../../ciera/models/ciera/ciera/architecture/file/file.xtuml');
INSERT INTO S_SPARM
	VALUES ("11b5d9b2-b195-4424-b74a-d23d3ae493f5",
	"50d39e2d-f5ce-4a7a-bb28-7b5db96d9f12",
	'file_to_import',
	"7f1815c6-b9da-4371-acbc-8297d9eaecf4",
	0,
	'',
	"13b80b56-f130-4bc8-8b9c-5a7f544f29ed",
	'');
INSERT INTO S_SPARM
	VALUES ("335230f4-33eb-4e7c-ab11-6ff1f1be1246",
	"50d39e2d-f5ce-4a7a-bb28-7b5db96d9f12",
	'type',
	"a65c34a3-dd47-4b91-a991-7859d23a011d",
	0,
	'',
	"11b5d9b2-b195-4424-b74a-d23d3ae493f5",
	'');
INSERT INTO S_DT_PROXY
	VALUES ("a65c34a3-dd47-4b91-a991-7859d23a011d",
	"00000000-0000-0000-0000-000000000000",
	'ImportType',
	'',
	'',
	'../../../../ciera/models/ciera/ciera/types/types.xtuml');
INSERT INTO PE_PE
	VALUES ("50d39e2d-f5ce-4a7a-bb28-7b5db96d9f12",
	1,
	"65dec46c-ec8b-4464-b227-a7853cadd3b4",
	"00000000-0000-0000-0000-000000000000",
	1);
INSERT INTO S_SYNC
	VALUES ("24fc042f-a00e-47b1-b724-c034b916eda4",
	"00000000-0000-0000-0000-000000000000",
	'addStringToImports',
	'',
	'file = param.file;
if ( "" != param.s )
  select any import_ref related by file->TypeImportReference[R402] where ( selected.fully_qualified_name == param.s and selected.type == param.type );
  if ( empty import_ref )
    import = TypeImport::get_import( import:param.s );
    create object instance import_ref of TypeImportReference;
    import_ref.type = param.type;
    relate import to file across R402 using import_ref;
  end if;
end if;',
	"ba5eda7a-def5-0000-0000-000000000000",
	1,
	'',
	0);
INSERT INTO S_SPARM
	VALUES ("5f922f45-f348-49c6-b177-05923a822bd5",
	"24fc042f-a00e-47b1-b724-c034b916eda4",
	'file',
	"7f1815c6-b9da-4371-acbc-8297d9eaecf4",
	0,
	'',
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO S_SPARM
	VALUES ("c1c7757b-bc2b-49e6-a90d-484fedbe521a",
	"24fc042f-a00e-47b1-b724-c034b916eda4",
	's',
	"ba5eda7a-def5-0000-0000-000000000004",
	0,
	'',
	"5f922f45-f348-49c6-b177-05923a822bd5",
	'');
INSERT INTO S_SPARM
	VALUES ("3c7ebbbf-dabc-4d00-8125-45c641e7911b",
	"24fc042f-a00e-47b1-b724-c034b916eda4",
	'type',
	"a65c34a3-dd47-4b91-a991-7859d23a011d",
	0,
	'',
	"c1c7757b-bc2b-49e6-a90d-484fedbe521a",
	'');
INSERT INTO PE_PE
	VALUES ("24fc042f-a00e-47b1-b724-c034b916eda4",
	1,
	"65dec46c-ec8b-4464-b227-a7853cadd3b4",
	"00000000-0000-0000-0000-000000000000",
	1);
INSERT INTO S_SYNC
	VALUES ("60ebf778-b067-4b6d-9a6b-6f83d8facb1c",
	"00000000-0000-0000-0000-000000000000",
	'getFileForInvocable',
	'',
	'invocable = param.invocable;
select one file related by invocable->Function[R427]->ComponentDefinition[R405]->File[R401];
if ( empty file )
  select one file related by invocable->PortMessage[R427]->Port[R420]->File[R401];
  if ( empty file )
    select one file related by invocable->Operation[R427]->Class[R416]->File[R401];
    if ( empty file )
      select one file related by invocable->AttributeDerivation[R427]->AttributeAccessor[R441]->Attribute[R4510]->Class[R410]->File[R401];
      if ( empty file )
        select one file related by invocable->UtilityFunction[R427]->Utility[R4559]->File[R401];
      end if;
    end if;
  end if;
end if;
return file;',
	"7f1815c6-b9da-4371-acbc-8297d9eaecf4",
	1,
	'',
	0);
INSERT INTO S_SPARM
	VALUES ("bf06610b-9c37-45d4-849e-0b07d951397c",
	"60ebf778-b067-4b6d-9a6b-6f83d8facb1c",
	'invocable',
	"30c7a5ba-c6d9-44fd-8e61-f22cde8fdc41",
	0,
	'',
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO S_DT_PROXY
	VALUES ("30c7a5ba-c6d9-44fd-8e61-f22cde8fdc41",
	"00000000-0000-0000-0000-000000000000",
	'inst_ref<Invocable Object>',
	'',
	'',
	'../../../../ciera/models/ciera/ciera/architecture/invocable/invocable.xtuml');
INSERT INTO PE_PE
	VALUES ("60ebf778-b067-4b6d-9a6b-6f83d8facb1c",
	1,
	"65dec46c-ec8b-4464-b227-a7853cadd3b4",
	"00000000-0000-0000-0000-000000000000",
	1);
INSERT INTO S_SYNC
	VALUES ("1959e27b-73ec-4760-9716-ec3600ed9897",
	"00000000-0000-0000-0000-000000000000",
	'getFileForStatement',
	'',
	'smt = param.smt;
select one invocable related by smt->CodeBlock[R450]->InvocableObject[R4000];
return ::getFileForInvocable( invocable:invocable );',
	"7f1815c6-b9da-4371-acbc-8297d9eaecf4",
	1,
	'',
	0);
INSERT INTO S_SPARM
	VALUES ("0636d6ee-b640-4d2e-8c7d-7f88bafebdf8",
	"1959e27b-73ec-4760-9716-ec3600ed9897",
	'smt',
	"056a9b55-7c4c-45a4-a684-ea45fce8fa86",
	0,
	'',
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO S_DT_PROXY
	VALUES ("056a9b55-7c4c-45a4-a684-ea45fce8fa86",
	"00000000-0000-0000-0000-000000000000",
	'inst_ref<Statement>',
	'',
	'',
	'../../../../ciera/models/ciera/ciera/architecture/statement/statement.xtuml');
INSERT INTO PE_PE
	VALUES ("1959e27b-73ec-4760-9716-ec3600ed9897",
	1,
	"65dec46c-ec8b-4464-b227-a7853cadd3b4",
	"00000000-0000-0000-0000-000000000000",
	1);
INSERT INTO S_SYNC
	VALUES ("d9e03f09-96ed-4d5c-a8db-df853da1f124",
	"00000000-0000-0000-0000-000000000000",
	'act_lnkGetMult',
	'',
	'act_lnk = param.act_lnk;
mult = Mult::ONE;

if ( Multiplicity::Many == act_lnk.Mult )
  mult = Mult::MANY;
elif ( Multiplicity::Unknown == act_lnk.Mult )
  select one r_simp related by act_lnk->R_REL[R681]->R_SIMP[R206];
  select one r_assoc related by act_lnk->R_REL[R681]->R_ASSOC[R206];
  if ( not_empty r_simp or not_empty r_assoc )
    // get base object
    select one base_o_obj related by act_lnk->ACT_LNK[R604.''succeeds'']->O_OBJ[R678];
    if ( empty base_o_obj )
      select one base_o_obj related by act_lnk->ACT_SEL[R637]->V_VAL[R613]->V_IRF[R801]->V_VAR[R808]->V_INT[R814]->O_OBJ[R818];
      if ( empty base_o_obj )
        select one base_o_obj related by act_lnk->ACT_SEL[R637]->V_VAL[R613]->V_ISR[R801]->V_VAR[R809]->V_INS[R814]->O_OBJ[R819];
      end if;
    end if;
    // get target object
    select one target_o_obj related by act_lnk->O_OBJ[R678];
    not_reflexive = target_o_obj.Obj_ID != base_o_obj.Obj_ID;
    phrase = C_UTIL::stripTics( s:act_lnk.Rel_Phrase );
    if ( not_empty r_simp )
      select one r_form related by r_simp->R_FORM[R208];
      if ( r_form.Mult == 1 and r_form.Obj_ID == target_o_obj.Obj_ID and ( not_reflexive or phrase == r_form.Txt_Phrs ) ) // target is simple formalizer and is many
        mult = Mult::MANY;
      else
        select any r_part related by r_simp->R_PART[R207] where
          ( selected.Mult == 1 and selected.Obj_ID == target_o_obj.Obj_ID and ( not_reflexive or phrase == selected.Txt_Phrs ) ); // target is simple participant and is many
        if ( not_empty r_part )
          mult = Mult::MANY;
        end if;
      end if;
    else
      select one r_aone related by r_assoc->R_AONE[R209];
      select one r_aoth related by r_assoc->R_AOTH[R210];
      select one r_assr related by r_assoc->R_ASSR[R211];
      if ( r_aone.Mult == 1 and r_aone.Obj_ID == target_o_obj.Obj_ID and ( not_reflexive or phrase == r_aone.Txt_Phrs ) ) or                                          // target is associative one and is many
         ( r_aoth.Mult == 1 and r_aoth.Obj_ID == target_o_obj.Obj_ID and ( not_reflexive or phrase == r_aoth.Txt_Phrs ) ) or                                          // target is associative other and is many
         ( r_assr.Mult == 1 and r_assr.Obj_ID == target_o_obj.Obj_ID ) or                                                                                             // target is associative link and is many
         ( r_aoth.Mult == 1 and r_assr.Obj_ID == target_o_obj.Obj_ID and r_aone.Obj_ID == base_o_obj.Obj_ID and ( not_reflexive or phrase == r_aoth.Txt_Phrs ) ) or   // target is associative link in the direction of other and other is many
         ( r_aone.Mult == 1 and r_assr.Obj_ID == target_o_obj.Obj_ID and r_aoth.Obj_ID == base_o_obj.Obj_ID and ( not_reflexive or phrase == r_aone.Txt_Phrs ) )      // target is associative link in the direction of one and one is many
        mult = Mult::MANY;
      end if;
    end if;
  end if;
end if;

return mult;',
	"8774ba5f-d952-424f-a26a-4815240d9ec8",
	1,
	'',
	0);
INSERT INTO S_SPARM
	VALUES ("d66803cd-4339-4475-90a9-0b9d9a84cb42",
	"d9e03f09-96ed-4d5c-a8db-df853da1f124",
	'act_lnk',
	"bcbe8755-e8ea-4d2b-9f81-529c5437c084",
	0,
	'',
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO S_DT_PROXY
	VALUES ("bcbe8755-e8ea-4d2b-9f81-529c5437c084",
	"00000000-0000-0000-0000-000000000000",
	'inst_ref<Chain Link>',
	'',
	'',
	'../../../../mcooa/models/mcooa/ooaofooa/Selection/Selection.xtuml');
INSERT INTO PE_PE
	VALUES ("d9e03f09-96ed-4d5c-a8db-df853da1f124",
	1,
	"65dec46c-ec8b-4464-b227-a7853cadd3b4",
	"00000000-0000-0000-0000-000000000000",
	1);
INSERT INTO S_DT_PROXY
	VALUES ("8774ba5f-d952-424f-a26a-4815240d9ec8",
	"00000000-0000-0000-0000-000000000000",
	'Mult',
	'',
	'',
	'../../../../ciera/models/ciera/ciera/types/types.xtuml');
INSERT INTO S_SYNC
	VALUES ("5d882113-0611-4677-a395-be1fc2f3a0d5",
	"00000000-0000-0000-0000-000000000000",
	'addTypeToImports',
	'',
	'type_to_import = param.type_to_import;
if ( not type_to_import.primitive() )
  ::addStringToImports( file:param.file, s:type_to_import.package + "." + type_to_import.name, type:param.type );
end if;',
	"ba5eda7a-def5-0000-0000-000000000000",
	1,
	'',
	0);
INSERT INTO S_SPARM
	VALUES ("d57fa54b-0faa-4534-ac1c-5ec6dc898b6d",
	"5d882113-0611-4677-a395-be1fc2f3a0d5",
	'file',
	"7f1815c6-b9da-4371-acbc-8297d9eaecf4",
	0,
	'',
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO S_SPARM
	VALUES ("2cccf470-1249-47d3-a28f-10f6788652b9",
	"5d882113-0611-4677-a395-be1fc2f3a0d5",
	'type_to_import',
	"be784cfe-3f8b-4e25-b183-484885b71173",
	0,
	'',
	"d57fa54b-0faa-4534-ac1c-5ec6dc898b6d",
	'');
INSERT INTO S_DT_PROXY
	VALUES ("be784cfe-3f8b-4e25-b183-484885b71173",
	"00000000-0000-0000-0000-000000000000",
	'inst_ref<Type>',
	'',
	'',
	'../../../../ciera/models/ciera/ciera/architecture/type/type.xtuml');
INSERT INTO S_SPARM
	VALUES ("5c08d5cb-21d4-4fb5-84d8-140ca94cb107",
	"5d882113-0611-4677-a395-be1fc2f3a0d5",
	'type',
	"a65c34a3-dd47-4b91-a991-7859d23a011d",
	0,
	'',
	"2cccf470-1249-47d3-a28f-10f6788652b9",
	'');
INSERT INTO PE_PE
	VALUES ("5d882113-0611-4677-a395-be1fc2f3a0d5",
	1,
	"65dec46c-ec8b-4464-b227-a7853cadd3b4",
	"00000000-0000-0000-0000-000000000000",
	1);
INSERT INTO S_SYNC
	VALUES ("f4648591-3962-4408-96d2-7f9b5e844820",
	"00000000-0000-0000-0000-000000000000",
	'getNextBlockNumber',
	'',
	'upper_block = param.upper_block;

select many then_blocks related by upper_block->Statement[R450]->IfSmt[R451]->CodeBlock[R453];
select many else_blocks related by upper_block->Statement[R450]->IfSmt[R451]->CodeBlock[R454];
select many while_blocks related by upper_block->Statement[R450]->WhileSmt[R451]->CodeBlock[R456];
select many for_blocks related by upper_block->Statement[R450]->ForSmt[R451]->CodeBlock[R455];

child_blocks = then_blocks + else_blocks + while_blocks + for_blocks;

// find the most recent child block
block_number = "0";
for each child_block in child_blocks
  if ( child_block.block_number > block_number )
    block_number = child_block.block_number;
  end if;
end for;

// increment
block_number = upper_block.block_number + "." + STR::itoa( i:STR::atoi( s:STR::substr( s:block_number, begin:STR::strlen( s:upper_block.block_number ) + 1, end:-1 ) ) + 1 );

return block_number;',
	"ba5eda7a-def5-0000-0000-000000000004",
	1,
	'',
	0);
INSERT INTO S_SPARM
	VALUES ("3d90c4de-562c-46e0-aaaa-f63a2b8cd0bc",
	"f4648591-3962-4408-96d2-7f9b5e844820",
	'upper_block',
	"e2eb4f67-ca2b-42ab-accf-5a2b475f8933",
	0,
	'',
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO S_DT_PROXY
	VALUES ("e2eb4f67-ca2b-42ab-accf-5a2b475f8933",
	"00000000-0000-0000-0000-000000000000",
	'inst_ref<Code Block>',
	'',
	'',
	'../../../../ciera/models/ciera/ciera/architecture/invocable/invocable.xtuml');
INSERT INTO PE_PE
	VALUES ("f4648591-3962-4408-96d2-7f9b5e844820",
	1,
	"65dec46c-ec8b-4464-b227-a7853cadd3b4",
	"00000000-0000-0000-0000-000000000000",
	1);
INSERT INTO PE_PE
	VALUES ("65dec46c-ec8b-4464-b227-a7853cadd3b4",
	1,
	"00000000-0000-0000-0000-000000000000",
	"00000000-0000-0000-0000-000000000000",
	7);
INSERT INTO S_SYS_PROXY
	VALUES ("1ed94c5d-00b5-463e-a399-41e45b7a60ea",
	'shared',
	1,
	'../shared.xtuml');
