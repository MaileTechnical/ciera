-- BP 7.1.6 content: Package syschar: 3 persistence-version: 7.1.6

INSERT INTO EP_PKG
	VALUES ("70c3eaea-5003-4aa5-b2c5-1b783d7f0c0c",
	"00000000-0000-0000-0000-000000000000",
	"aa743d3c-66dc-49df-a19a-ffbadf9c9d1b",
	'analysis',
	'',
	0);
INSERT INTO GD_MD
	VALUES ("1889473c-9941-436d-b8c7-d81ded03bb0b",
	112,
	"70c3eaea-5003-4aa5-b2c5-1b783d7f0c0c",
	108,
	0,
	0,
	1,
	1,
	1,
	12,
	1,
	0,
	0,
	200,
	150,
	0,
	'',
	'ciera::ciera::analysis');
INSERT INTO GD_GE
	VALUES ("c253c157-fc9b-4732-8b9b-2c5b59c6923d",
	"1889473c-9941-436d-b8c7-d81ded03bb0b",
	"3e52f60d-4cb6-430b-a331-2d8e29d2839e",
	108,
	0,
	'ciera::ciera::analysis::classpruning');
INSERT INTO GD_SHP
	VALUES ("c253c157-fc9b-4732-8b9b-2c5b59c6923d");
INSERT INTO GD_NCS
	VALUES ("c253c157-fc9b-4732-8b9b-2c5b59c6923d");
INSERT INTO DIM_ND
	VALUES (200.000000,
	150.000000,
	"c253c157-fc9b-4732-8b9b-2c5b59c6923d");
INSERT INTO DIM_GE
	VALUES (0.000000,
	0.000000,
	"c253c157-fc9b-4732-8b9b-2c5b59c6923d",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ELE
	VALUES ("c253c157-fc9b-4732-8b9b-2c5b59c6923d",
	0,
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_DIA
	VALUES ("1889473c-9941-436d-b8c7-d81ded03bb0b",
	'',
	1.000000,
	0.000000,
	0.000000,
	"00000000-0000-0000-0000-000000000000");
INSERT INTO S_SYNC
	VALUES ("b8a9c0d4-672d-4b38-8018-a712cce4298c",
	"00000000-0000-0000-0000-000000000000",
	'pruneClasses',
	'',
	'// remove classes that are not referenced in action language or participating
// in unconditional associations with classes which are referenced

// classes may be referred in action language in the following ways:
// - class based operation invocation
// - create object statement
// - select statement
// - instance reference type applied to an element

// create pruning candidates for unreferenced objects
select many o_objs from instances of O_OBJ;
for each o_obj in o_objs

  // check if this object is ever referenced in action language
  referenced = false;
  
  // class based operations
  select many class_ops related by o_obj->O_TFR[R115] where ( Scope::Class == selected.Instance_Based );
  select any op_invoc related by class_ops->ACT_TFM[R673];
  select any op_val related by class_ops->V_TRV[R829];
  referenced = referenced or ( not_empty op_invoc or not_empty op_val );
  
  // create object statements
  select any act_cr related by o_obj->ACT_CR[R671];
  select any act_cnv related by o_obj->ACT_CNV[R672];
  referenced = referenced or ( not_empty act_cr or not_empty act_cnv );
  
  // select statements
  select any act_fiw related by o_obj->ACT_FIW[R676];
  select any act_fio related by o_obj->ACT_FIO[R677];
  select any act_lnk related by o_obj->ACT_LNK[R678];
  referenced = referenced or ( not_empty act_fiw or not_empty act_fio or not_empty act_lnk );
  
  // indirect select statements
  // for linked associations, a class may not be referenced, but it is still
  // necessary to ensure that a linked association that it participates in
  // works properly
  select any act_lnk related by o_obj->R_REL[R201]->R_ASSOC[R206]->R_REL[R206]->ACT_LNK[R681];
  referenced = referenced or ( not_empty act_lnk );
  
  // typed elements
  select any v_var related by o_obj->S_IRDT[R123]->S_DT[R17]->V_VAR[R848];
  select any v_trn related by o_obj->S_IRDT[R123]->S_DT[R17]->V_TRN[R821];
  select any v_val related by o_obj->S_IRDT[R123]->S_DT[R17]->V_VAL[R820];
  select any sm_evtdi related by o_obj->S_IRDT[R123]->S_DT[R17]->SM_EVTDI[R524];
  select any s_mbr related by o_obj->S_IRDT[R123]->S_DT[R17]->S_MBR[R45];
  select any c_io related by o_obj->S_IRDT[R123]->S_DT[R17]->C_IO[R4008];
  select any c_pp related by o_obj->S_IRDT[R123]->S_DT[R17]->C_PP[R4007];
  select any s_sparm related by o_obj->S_IRDT[R123]->S_DT[R17]->S_SPARM[R26];
  select any s_sync related by o_obj->S_IRDT[R123]->S_DT[R17]->S_SYNC[R25];
  select any s_bparm related by o_obj->S_IRDT[R123]->S_DT[R17]->S_BPARM[R22];
  select any s_brg related by o_obj->S_IRDT[R123]->S_DT[R17]->S_BRG[R20];
  select any s_udt related by o_obj->S_IRDT[R123]->S_DT[R17]->S_UDT[R18];
  select any cnst_syc related by o_obj->S_IRDT[R123]->S_DT[R17]->CNST_SYC[R1500];
  select any o_tparm related by o_obj->S_IRDT[R123]->S_DT[R17]->O_TPARM[R118];
  select any o_tfr related by o_obj->S_IRDT[R123]->S_DT[R17]->O_TFR[R116];
  select any o_attr related by o_obj->S_IRDT[R123]->S_DT[R17]->O_ATTR[R114];
  referenced = referenced or ( not_empty v_var or not_empty v_trn or not_empty v_val or not_empty sm_evtdi or not_empty s_mbr or not_empty c_io or not_empty c_pp or not_empty s_sparm or not_empty s_sync or not_empty s_bparm or not_empty s_brg or not_empty s_udt or not_empty cnst_syc or not_empty o_tparm or not_empty o_tfr or not_empty o_attr );
  
  // create a pruning candidate for this class
  if ( not referenced )
    create object instance cand of PruningCandidate;
    relate cand to o_obj across R3898;
    cand.valid = true;
  end if;

end for;

// group pruning candidates in dependent clusters. candidates which are
// not referenced, but which are part referred to through unconditional
// associations must be included
processing = true;
if ( param.level > 1 )
  processing = false;  // above optimization level 1 all unreferenced classes are removed even
end if;                // if they participate in unconditional associations
while ( processing )
  processing = false;
  select many cands from instances of PruningCandidate where ( selected.valid );
  for each cand in cands
    select many group_oirs from instances of R_OIR where false;
    select many oirs related by cand->O_OBJ[R3898]->R_OIR[R201];
    while not_empty oirs
      // get related objects unconditional associations to this oir
      // TODO it currently gets all linked classes (even conditional associations )
      select many related_oirs from instances of R_OIR where false;
      for each oir in oirs
        // subsuper associations
        select many subsup_oirs1 related by oir->R_RGO[R203]->R_SUB[R205]->R_SUBSUP[R213]->R_REL[R206]->R_OIR[R201] where ( selected.OIR_ID != oir.OIR_ID );
        select many subsup_oirs2 related by oir->R_RTO[R203]->R_SUPER[R204]->R_SUBSUP[R212]->R_REL[R206]->R_OIR[R201] where ( selected.OIR_ID != oir.OIR_ID );
        // simple associations
        select one simp_form1 related by oir->R_RGO[R203]->R_FORM[R205] where ( 0 == selected.Cond );
        select many simp_oirs1 related by simp_form1->R_SIMP[R208]->R_PART[R207]->R_RTO[R204]->R_OIR[R203];
        select one simp_part2 related by oir->R_RTO[R203]->R_PART[R204] where ( 0 == selected.Cond );
        select one simp_oir2 related by simp_part2->R_SIMP[R207]->R_FORM[R208]->R_RGO[R205]->R_OIR[R203];
        select one simp_part3 related by oir->R_RTO[R203]->R_PART[R204] where (  0 == selected.Cond );
        select many simp_oirs3 related by simp_part3->R_SIMP[R207]->R_PART[R207]->R_RTO[R204]->R_OIR[R203] where ( selected.OIR_ID != oir.OIR_ID );
        // linked associations
        select one assoc_one1 related by oir->R_RTO[R203]->R_AONE[R204] where ( 0 == selected.Cond );
        select one assoc_oir1 related by assoc_one1->R_ASSOC[R209]->R_AOTH[R210]->R_RTO[R204]->R_OIR[R203];
        select one assoc_oir2 related by assoc_one1->R_ASSOC[R209]->R_ASSR[R211]->R_RGO[R205]->R_OIR[R203];
        select one assoc_oth3 related by oir->R_RTO[R203]->R_AOTH[R204] where ( 0 == selected.Cond );
        select one assoc_oir3 related by assoc_oth3->R_ASSOC[R210]->R_AONE[R209]->R_RTO[R204]->R_OIR[R203];
        select one assoc_oir4 related by assoc_oth3->R_ASSOC[R210]->R_ASSR[R211]->R_RGO[R205]->R_OIR[R203];
        select one assoc_assr related by oir->R_RGO[R203]->R_ASSR[R205];
        select one assoc_one5 related by assoc_assr->R_ASSOC[R211]->R_AONE[R209];
        select one assoc_oth5 related by assoc_assr->R_ASSOC[R211]->R_AOTH[R210];
        select one assoc_oir5 related by assoc_one5->R_RTO[R204]->R_OIR[R203] where ( 0 == assoc_oth5.Cond );
        select one assoc_oir6 related by assoc_oth5->R_RTO[R204]->R_OIR[R203] where ( 0 == assoc_one5.Cond );
        // collect oirs
        related_oirs = related_oirs | subsup_oirs1 | subsup_oirs2 | simp_oirs1 | simp_oir2 | simp_oirs3 | assoc_oir1 | assoc_oir2 | assoc_oir3 | assoc_oir4 | assoc_oir5 | assoc_oir6;
      end for;
      oirs = related_oirs - group_oirs;  // set new oirs assuring that no oirs are seen twice
      group_oirs = group_oirs | related_oirs;
    end while;
    // if the number of collected classes in the group is not the same as the
    // number of related pruning candidates, at least one class in the group
    // is referenced and therefore this candidate must be included in generation
    select many group_objs related by group_oirs->O_OBJ[R201];
    select many group_cands related by group_objs->PruningCandidate[R3898];
    if ( cardinality group_objs != cardinality group_cands )
      cand.valid = false;
      processing = true;
    end if;
  end for;
end while;

// ignore objects for valid pruning candidates
select any class_markable from instances of Markable where ( selected.name == "Model Class" );
select any exclude_feature from instances of Feature where ( selected.name == "Exclude" );
select many valid_cands from instances of PruningCandidate where ( selected.valid );
for each cand in valid_cands
  select one cand_obj related by cand->O_OBJ[R3898];
  select one cand_pe related by cand_obj->PE_PE[R8001];
  create object instance class_mark of Mark;
  class_mark.path = ::containerMarkingPath( pe:cand_pe ) + "::" + cand_obj.Name;
  relate class_markable to exclude_feature across R2821 using class_mark;
end for;
valid_cands_count = cardinality valid_cands;
LOG::LogInfo( message:"  " + STR::itoa( i:valid_cands_count ) + " unused classes excluded from generation" );

// ignore associations that include valid pruning candidates
valid_rels_count = 0;
select any rel_markable from instances of Markable where ( selected.name == "Association" );
select many r_rels from instances of R_REL;
for each r_rel in r_rels
  select any valid_cand related by r_rel->O_OBJ[R201]->PruningCandidate[R3898] where ( selected.valid );
  select any cand_subtype related by valid_cand->O_OBJ[R3898]->R_OIR[R201]->R_RGO[R203]->R_SUB[R205] where ( selected.Rel_ID == r_rel.Rel_ID );
  select many sibling_subtypes related by cand_subtype->R_SUBSUP[R213]->R_SUB[R213] where ( not_empty cand_subtype and selected.OIR_ID != cand_subtype.OIR_ID );
  if ( not_empty valid_cand and ( empty cand_subtype or empty sibling_subtypes ) ) // do not ignore the association if the object is a subtype with siblings
    if ( ::Association_isFormalized( r_rel:r_rel ) )
      ::Association_unformalize( r_rel:r_rel );
    end if;
    select one rel_pe related by r_rel->PE_PE[R8001];
    create object instance rel_mark of Mark;
    rel_mark.path = ::containerMarkingPath( pe:rel_pe ) + "::R" + STR::itoa( i:r_rel.Numb );
    relate rel_markable to exclude_feature across R2821 using rel_mark;
    valid_rels_count = valid_rels_count + 1;
  end if;
end for;
LOG::LogInfo( message:"  " + STR::itoa( i:valid_rels_count ) + " unused associations excluded from generation" );

// dispose all instance data
select many all_cands from instances of PruningCandidate;
for each cand in all_cands
  cand.dispose();
end for;',
	"ba5eda7a-def5-0000-0000-000000000000",
	1,
	'',
	0);
INSERT INTO S_SPARM
	VALUES ("79977e9f-6205-4d77-9321-2623372ee17b",
	"b8a9c0d4-672d-4b38-8018-a712cce4298c",
	'level',
	"ba5eda7a-def5-0000-0000-000000000002",
	0,
	'',
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO PE_PE
	VALUES ("b8a9c0d4-672d-4b38-8018-a712cce4298c",
	1,
	"70c3eaea-5003-4aa5-b2c5-1b783d7f0c0c",
	"00000000-0000-0000-0000-000000000000",
	1);
INSERT INTO PE_PE
	VALUES ("70c3eaea-5003-4aa5-b2c5-1b783d7f0c0c",
	1,
	"acef9848-aa6d-428b-9882-cc90deb0a54a",
	"00000000-0000-0000-0000-000000000000",
	7);
INSERT INTO EP_PKG_PROXY
	VALUES ("acef9848-aa6d-428b-9882-cc90deb0a54a",
	"aa743d3c-66dc-49df-a19a-ffbadf9c9d1b",
	"aa743d3c-66dc-49df-a19a-ffbadf9c9d1b",
	'ciera',
	'',
	0,
	'../ciera.xtuml');
INSERT INTO S_SYS_PROXY
	VALUES ("aa743d3c-66dc-49df-a19a-ffbadf9c9d1b",
	'ciera',
	1,
	'../../ciera.xtuml');
