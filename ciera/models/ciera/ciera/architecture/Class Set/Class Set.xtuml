-- BP 7.1.6 content: ModelClass syschar: 3 persistence-version: 7.1.6

INSERT INTO O_OBJ
	VALUES ("7a0ff0ff-ef1e-4adc-a020-9c754a23338f",
	'Class Set',
	411,
	'ClassSet',
	'',
	"00000000-0000-0000-0000-000000000000");
INSERT INTO O_TFR
	VALUES ("c2a03cdd-1de7-4686-88fe-8f8e32768ef7",
	"7a0ff0ff-ef1e-4adc-a020-9c754a23338f",
	'render',
	'',
	"ba5eda7a-def5-0000-0000-000000000000",
	1,
	'select one file related by self->File[R403];
package_name = ::pathToPackage( path:file.path );

class_set_name = self.name;

select one obj related by self->Class[R411];
class_name = obj.name;
class_key_letters = obj.key_letters;
isgeneric = false;
isempty = false;
T::include( file:"java/t.selectfrominstances.java" );
selections_block = T::body();
T::clear();

select many refs related by self->Class[R411]->AssociatedClassReference[R417];
if ( not_empty refs )
  ::addStringToImports( file:file, s:"ciera.exceptions.XtumlException" );
  ::addStringToImports( file:file, s:"ciera.classes.Where" );
  ::addStringToImports( file:file, s:"ciera.classes.ModelInstance" );
end if;
for each ref in refs
  is_unconditional = ref.unconditional;
  select one type related by ref->TypedObject[R406]->Type[R410];
  select one obj related by type->Class[R412];
  is_many = false;
  if ( empty obj )
    select one obj related by type->ClassSet[R412]->Class[R411];
    is_many = true;
  end if;
  select one objsettype related by obj->ClassSet[R411]->Type[R412];
  target_type_name = objsettype.name;
  target_key_letters = obj.key_letters;
  rel_numb = STR::itoa( i:ref.rel_numb );
  ref_name = ref.name;
  isset = true;
  isempty = false;
  T::include( file:"java/t.selectrelated.java" );
  T::b( s:"\n" );
end for;
selections_block = T::body() + selections_block;
T::clear();

separator = "";
for each ref in refs
  is_unconditional = ref.unconditional;
  select one type related by ref->TypedObject[R406]->Type[R410];
  select one obj related by type->Class[R412];
  is_many = false;
  if ( empty obj )
    select one obj related by type->ClassSet[R412]->Class[R411];
    is_many = true;
  end if;
  select one objsettype related by obj->ClassSet[R411]->Type[R412];
  target_type_name = objsettype.name;
  target_key_letters = obj.key_letters;
  rel_numb = STR::itoa( i:ref.rel_numb );
  ref_name = ref.name;
  isset = true;
  isempty = true;
  T::b( s:separator );
  T::include( file:"java/t.selectrelated.java" );
  separator = "\n";
end for;
empty_selections_block = T::body();
T::clear();

isgeneric = false;
isempty = true;
T::include( file:"java/t.selectfrominstances.java" );
empty_selections_block = empty_selections_block + T::body();
T::clear();

select one obj related by self->Class[R411];
class_name = obj.name;

import_block = "";
select many imports related by file->ImportStatement[R402];
for each import in imports
  import.render();
  import_block = import_block + T::body();
  T::clear();
end for;

T::include( file:"java/t.set.java" );',
	1,
	'',
	"00000000-0000-0000-0000-000000000000",
	0);
INSERT INTO O_DBATTR
	VALUES ("f29a8ee7-ce7a-484e-92c3-dde8d168dc91",
	"7a0ff0ff-ef1e-4adc-a020-9c754a23338f",
	'select one obj related by self->Class[R411];
self.name = obj.name + "Set";',
	1,
	0);
INSERT INTO O_BATTR
	VALUES ("f29a8ee7-ce7a-484e-92c3-dde8d168dc91",
	"7a0ff0ff-ef1e-4adc-a020-9c754a23338f");
INSERT INTO O_ATTR
	VALUES ("f29a8ee7-ce7a-484e-92c3-dde8d168dc91",
	"7a0ff0ff-ef1e-4adc-a020-9c754a23338f",
	"00000000-0000-0000-0000-000000000000",
	'name',
	'',
	'',
	'name',
	0,
	"ba5eda7a-def5-0000-0000-000000000004",
	'',
	'');
INSERT INTO O_ID
	VALUES (0,
	"7a0ff0ff-ef1e-4adc-a020-9c754a23338f");
INSERT INTO O_ID
	VALUES (1,
	"7a0ff0ff-ef1e-4adc-a020-9c754a23338f");
INSERT INTO O_ID
	VALUES (2,
	"7a0ff0ff-ef1e-4adc-a020-9c754a23338f");
INSERT INTO PE_PE
	VALUES ("7a0ff0ff-ef1e-4adc-a020-9c754a23338f",
	1,
	"73f28ea1-414d-499d-893f-5384c59bc0b2",
	"00000000-0000-0000-0000-000000000000",
	4);
INSERT INTO EP_PKG_PROXY
	VALUES ("73f28ea1-414d-499d-893f-5384c59bc0b2",
	"00000000-0000-0000-0000-000000000000",
	"aa743d3c-66dc-49df-a19a-ffbadf9c9d1b",
	'architecture',
	'',
	0,
	'../architecture.xtuml');
