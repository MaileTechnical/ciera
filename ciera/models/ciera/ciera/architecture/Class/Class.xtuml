-- BP 7.1.6 content: ModelClass syschar: 3 persistence-version: 7.1.6

INSERT INTO O_OBJ
	VALUES ("1dbec688-8d2c-4cd4-a8b4-27bf3ccaa1fd",
	'Class',
	412,
	'Class',
	'Represents a single model class.',
	"00000000-0000-0000-0000-000000000000");
INSERT INTO O_TFR
	VALUES ("01669451-fd2d-4982-a1d4-f88846f42973",
	"1dbec688-8d2c-4cd4-a8b4-27bf3ccaa1fd",
	'render',
	'',
	"ba5eda7a-def5-0000-0000-000000000000",
	1,
	'select one file related by self->File[R403];
package_name = ::pathToPackage( path:file.path );

class_name = self.name;
class_number = STR::itoa( i:self.number );
class_kl = self.key_letters;

// TODO get this from a mark
extends_class = "ModelInstance";
::addStringToImports( file:file, s:"io.ciera.cairn.classes.ModelInstance" );

select one set related by self->ClassSet[R411];
class_set_name = set.name;

select many attrs related by self->Attribute[R416];
if ( not_empty attrs )
  ::addStringToImports( file:file, s:"io.ciera.summit.exceptions.XtumlException" );
end if;
for each attr in attrs
  attr.render();
end for;
attribute_block = T::body();
T::clear();

select many ops related by self->Operation[R425];
for each op in ops
  op.render();
end for;
operations_block = T::body();
T::clear();

select many refs related by self->AssociatedClassReference[R417];
if ( not_empty refs )
  ::addStringToImports( file:file, s:"io.ciera.summit.exceptions.XtumlException" );
  ::addStringToImports( file:file, s:"io.ciera.summit.exceptions.EmptyInstanceException" );
  ::addStringToImports( file:file, s:"io.ciera.summit.classes.IWhere" );
end if;
for each ref in refs
  ref.render();
  select one type related by ref->TypedObject[R406]->Type[R410];
end for;
assoc_attr_block = T::body();
T::clear();

separator = "";
for each ref in refs
  select one basic related by ref->BasicReference[R420];
  select one sub related by ref->SubtypeReference[R420];
  if ( not_empty sub or ( not_empty basic and not basic.formalizer ) )
    ::addStringToImports( file:file, s:"io.ciera.summit.exceptions.LinkException" );
    select one type related by ref->TypedObject[R406]->Type[R410];
    is_many = false;
    select one builtin related by type->BuiltInType[R412];
    if ( not_empty builtin and builtin.instset )
      is_many = true;
      select any insttype from instances of BuiltInType where ( selected.inst );
      select one type related by insttype->Type[R412];
    elif ( empty builtin )
      select one obj related by type->Class[R412];
      if ( empty obj )
        select one type related by ref->TypedObject[R406]->Type[R410]->ClassSet[R412]->Class[R411]->Type[R412];
        is_many = true;
      end if;
    end if;
    target_type_name = type.name;
    ref_name = ref.name;
    ref_name0 = STR::substr( s:ref_name, begin:0, end:1 );
    ref_name1 = STR::substr( s:ref_name, begin:1, end:-1 );
    capital_ref_name = T::c( s:ref_name0 ) + ref_name1;
    rel_numb = STR::itoa( i:ref.rel_numb );
    type_name0 = STR::substr( s:target_type_name, begin:0, end:1 );
    type_name1 = STR::substr( s:target_type_name, begin:1, end:-1 );
    inst_name = T::l( s:type_name0 ) + type_name1;
    T::b( s:separator );
    T::include( file:"java/t.participant.java" );
    separator = "\n";
  end if;
end for;
rto_functions_block = T::body();
T::clear();

has_ism = false;

for each ref in refs
  select one type related by ref->TypedObject[R406]->Type[R410];
  target_type_name = type.name;
  ref_name = ref.name;
  declaration = false;
  initialize = true;
  select one obj related by type->ClassSet[R412];
  is_many = true;
  if ( empty obj )
    is_many = false;
  end if;
  T::include( file:"java/t.associatedclassref.java" );
end for;
attr_init_block = T::body();
T::clear();

for each attr in attrs
  select one type related by attr->TypedObject[R406]->Type[R410];
  select one builtin related by type->BuiltInType[R412];
  if ( not_empty builtin and builtin.unique )
    type_name = type.name;
    attr_name = attr.name;
    declaration = false;
    unique_id_initialize = true;
    T::include( file:"java/t.attribute.java" );
  end if;
end for;
attr_init_block = attr_init_block + T::body();
T::clear();

separator = "";
for each attr in attrs
  select one attr_type related by attr->TypedObject[R406]->Type[R410];
  attr_type_name = attr_type.name;
  attr_camel_case_name = ::camelCaseName( name:attr.base_name, start_lower:false );
  select any ref related by attr->AssociatedClassReference[R418];
  is_referential_attr = not_empty ref;
  attr_name = attr.name;
  is_primitive_type = ::is_primitive_type( type:attr_type );
  T::b( s:separator );
  T::include( file:"java/t.attributeaccessors.java" );
  separator = "\n";
end for;
accessors_block = T::body();
T::clear();

separator = "";
for each ref in refs
  phrase = "";
  is_subtype = false;
  select one subtype_ref related by ref->SubtypeReference[R420];
  if ( empty subtype_ref )
    select one basic_ref related by ref->BasicReference[R420];
    if ( not_empty basic_ref )
      phrase = basic_ref.phrase;
    end if;
    is_unconditional = ref.unconditional;
    if ( is_unconditional )
      ::addStringToImports( file:file, s:"io.ciera.summit.exceptions.ModelIntegrityException" );
    end if;
    select one type related by ref->TypedObject[R406]->Type[R410];
    target_type_name = type.name;
    target_type_obj_name = target_type_name;
    select one obj related by type->Class[R412];
    is_many = false;
    if ( empty obj )
      select one obj related by type->ClassSet[R412]->Class[R411];
      target_type_obj_name = obj.name;
      is_many = true;
    end if;
    target_key_letters = obj.key_letters;
    rel_numb = STR::itoa( i:ref.rel_numb );
    ref_name = ref.name;
    isset = false;
    isempty = false;
    T::b( s:separator );
    T::include( file:"java/t.selectrelated.java" );
    separator = "\n";
  else
    is_subtype = true;
    select many corresponding_refs related by ref->Class[R417]->ComponentDefinition[R414]->Class[R414]->
    	AssociatedClassReference[R417]->SupertypeReference[R420]->AssociatedClassReference[R420] where ( selected.rel_numb == ref.rel_numb );
    for each corresponding_ref in corresponding_refs
      is_unconditional = ref.unconditional;
      ::addStringToImports( file:file, s:"io.ciera.summit.exceptions.ModelIntegrityException" );
      select one type related by corresponding_ref->Class[R417]->Type[R412];
      target_type_name = type.name;
      target_type_obj_name = target_type_name;
      is_many = false;
      select one obj related by type->Class[R412];
      target_key_letters = obj.key_letters;
      rel_numb = STR::itoa( i:ref.rel_numb );
      ref_name = ref.name;
      isset = false;
      isempty = false;
      T::b( s:separator );
      T::include( file:"java/t.selectrelated.java" );
      separator = "\n";
    end for;
  end if;
end for;
selections_block = T::body();
T::clear();

relates_block = "";
unrelates_block = "";
separator = "";
for each ref in refs
  is_empty = false;
  phrase = "";
  corresponding_phrase = "";
  corresponding_is_many = false;
  rel_numb = STR::itoa( i:ref.rel_numb );
  ref_name = ref.name;
  ref_name0 = STR::substr( s:ref_name, begin:0, end:1 );
  ref_name1 = STR::substr( s:ref_name, begin:1, end:-1 );
  capital_ref_name = T::c( s:ref_name0 ) + ref_name1;
  select one subtype_ref related by ref->SubtypeReference[R420];
  if ( not_empty subtype_ref )
    is_formalizer = false;
    is_many = false;
    select many corresponding_refs related by ref->Class[R417]->ComponentDefinition[R414]->Class[R414]->
    	AssociatedClassReference[R417]->SupertypeReference[R420]->AssociatedClassReference[R420] where ( selected.rel_numb == ref.rel_numb );
    for each corresponding_ref in corresponding_refs
      select one obj related by corresponding_ref->Class[R417];
      select one type related by obj->Type[R412];
      target_key_letters = obj.key_letters;
      target_type_name = type.name;
      type_name0 = STR::substr( s:target_type_name, begin:0, end:1 );
      type_name1 = STR::substr( s:target_type_name, begin:1, end:-1 );
      target_inst_name = T::l( s:type_name0 ) + type_name1;
      T::b( s:separator );
      T::include( file:"java/t.relate.java" );
      relates_block = relates_block + T::body();
      T::clear();
      T::b( s:separator );
      T::include( file:"java/t.unrelate.java" );
      unrelates_block = unrelates_block + T::body();
      T::clear();
      separator = "\n";
    end for;
  else
    select one type related by ref->TypedObject[R406]->Type[R410];
    select one obj related by type->Class[R412];
    is_many = false;
    if ( empty obj )
      select one obj related by type->ClassSet[R412]->Class[R411];
      select one type related by obj->Type[R412];
      is_many = true;
    end if;
    target_type_name = type.name;
    type_name0 = STR::substr( s:target_type_name, begin:0, end:1 );
    type_name1 = STR::substr( s:target_type_name, begin:1, end:-1 );
    target_inst_name = T::l( s:type_name0 ) + type_name1;
    target_key_letters = obj.key_letters;
    select one basic_ref related by ref->BasicReference[R420];
    if ( not_empty basic_ref )
      phrase = basic_ref.phrase;
    end if;
    is_formalizer = true;
    if ( not_empty basic_ref and not basic_ref.formalizer )
      is_formalizer = false;
      select many corresponding_refs related by obj->AssociatedClassReference[R417] where ( selected.rel_numb == ref.rel_numb );
      select any corresponding_basic_ref related by corresponding_refs->BasicReference[R420] where ( selected.phrase != phrase );
      if ( not_empty corresponding_basic_ref )
        corresponding_phrase = corresponding_basic_ref.phrase;
      end if;
    else
      is_formalizer = true;
      ::addStringToImports( file:file, s:"io.ciera.summit.exceptions.LinkException" );
      select many corresponding_refs related by obj->AssociatedClassReference[R417] where ( selected.rel_numb == ref.rel_numb );
      select any corresponding_basic_ref related by corresponding_refs->BasicReference[R420] where ( selected.phrase != phrase );
      select one corresponding_ref related by corresponding_basic_ref->AssociatedClassReference[R420];
      if ( empty corresponding_ref )
        select any corresponding_ref related by obj->AssociatedClassReference[R417] where ( selected.rel_numb == ref.rel_numb );
      end if;
      ref_name0 = STR::substr( s:corresponding_ref.name, begin:0, end:1 );
      ref_name1 = STR::substr( s:corresponding_ref.name, begin:1, end:-1 );
      capital_ref_name = T::c( s:ref_name0 ) + ref_name1;
      select one obj related by corresponding_ref->TypedObject[R406]->Type[R410]->Class[R412];
      select one builtin related by corresponding_ref->TypedObject[R406]->Type[R410]->BuiltInType[R412];
      corresponding_is_many = false;
      if ( ( not_empty builtin and builtin.instset ) or ( empty obj and empty builtin ) )
        corresponding_is_many = true;
      end if;
    end if;
    T::b( s:separator );
    T::include( file:"java/t.relate.java" );
    relates_block = relates_block + T::body();
    T::clear();
    T::b( s:separator );
    T::include( file:"java/t.unrelate.java" );
    unrelates_block = unrelates_block + T::body();
    T::clear();
    separator = "\n";
  end if;
end for;

separator = "";
for each ref in refs
  phrase = "";
  is_subtype = false;
  select one subtype_ref related by ref->SubtypeReference[R420];
  if ( empty subtype_ref )
    select one basic_ref related by ref->BasicReference[R420];
    if ( not_empty basic_ref )
      phrase = basic_ref.phrase;
    end if;
    is_unconditional = ref.unconditional;
    if ( is_unconditional )
      ::addStringToImports( file:file, s:"io.ciera.summit.exceptions.ModelIntegrityException" );
    end if;
    select one type related by ref->TypedObject[R406]->Type[R410];
    target_type_name = type.name;
    target_type_obj_name = target_type_name;
    select one obj related by type->Class[R412];
    is_many = false;
    if ( empty obj )
      select one obj related by type->ClassSet[R412]->Class[R411];
      target_type_obj_name = obj.name;
      is_many = true;
    end if;
    target_key_letters = obj.key_letters;
    rel_numb = STR::itoa( i:ref.rel_numb );
    ref_name = ref.name;
    isset = false;
    isempty = true;
    T::b( s:separator );
    T::include( file:"java/t.selectrelated.java" );
    separator = "\n";
  else
    select many corresponding_refs related by ref->Class[R417]->ComponentDefinition[R414]->Class[R414]->
    	AssociatedClassReference[R417]->SupertypeReference[R420]->AssociatedClassReference[R420] where ( selected.rel_numb == ref.rel_numb );
    for each corresponding_ref in corresponding_refs
      is_unconditional = ref.unconditional;
      ::addStringToImports( file:file, s:"io.ciera.summit.exceptions.ModelIntegrityException" );
      select one type related by corresponding_ref->Class[R417]->Type[R412];
      target_type_name = type.name;
      target_type_obj_name = target_type_name;
      is_many = false;
      select one obj related by type->Class[R412];
      target_key_letters = obj.key_letters;
      rel_numb = STR::itoa( i:ref.rel_numb );
      ref_name = ref.name;
      isset = false;
      isempty = true;
      T::b( s:separator );
      T::include( file:"java/t.selectrelated.java" );
      separator = "\n";
    end for;
  end if;
end for;
empty_selections_block = T::body();
T::clear();

empty_relates_block = "";
empty_unrelates_block = "";
separator = "";
for each ref in refs
  is_empty = true;
  phrase = "";
  corresponding_phrase = "";
  corresponding_is_many = false;
  rel_numb = STR::itoa( i:ref.rel_numb );
  ref_name = ref.name;
  ref_name0 = STR::substr( s:ref_name, begin:0, end:1 );
  ref_name1 = STR::substr( s:ref_name, begin:1, end:-1 );
  capital_ref_name = T::c( s:ref_name0 ) + ref_name1;
  select one subtype_ref related by ref->SubtypeReference[R420];
  if ( not_empty subtype_ref )
    is_formalizer = false;
    is_many = false;
    select many corresponding_refs related by ref->Class[R417]->ComponentDefinition[R414]->Class[R414]->
    	AssociatedClassReference[R417]->SupertypeReference[R420]->AssociatedClassReference[R420] where ( selected.rel_numb == ref.rel_numb );
    for each corresponding_ref in corresponding_refs
      select one obj related by corresponding_ref->Class[R417];
      select one type related by obj->Type[R412];
      target_key_letters = obj.key_letters;
      target_type_name = type.name;
      type_name0 = STR::substr( s:target_type_name, begin:0, end:1 );
      type_name1 = STR::substr( s:target_type_name, begin:1, end:-1 );
      target_inst_name = T::l( s:type_name0 ) + type_name1;
      T::b( s:separator );
      T::include( file:"java/t.relate.java" );
      empty_relates_block = empty_relates_block + T::body();
      T::clear();
      T::b( s:separator );
      T::include( file:"java/t.unrelate.java" );
      empty_unrelates_block = empty_unrelates_block + T::body();
      T::clear();
      separator = "\n";
    end for;
  else
    select one type related by ref->TypedObject[R406]->Type[R410];
    select one obj related by type->Class[R412];
    is_many = false;
    if ( empty obj )
      select one obj related by type->ClassSet[R412]->Class[R411];
      select one type related by obj->Type[R412];
      is_many = true;
    end if;
    target_type_name = type.name;
    type_name0 = STR::substr( s:target_type_name, begin:0, end:1 );
    type_name1 = STR::substr( s:target_type_name, begin:1, end:-1 );
    target_inst_name = T::l( s:type_name0 ) + type_name1;
    target_key_letters = obj.key_letters;
    select one basic_ref related by ref->BasicReference[R420];
    if ( not_empty basic_ref )
      phrase = basic_ref.phrase;
    end if;
    is_formalizer = true;
    if ( not_empty basic_ref and not basic_ref.formalizer )
      is_formalizer = false;
      select many corresponding_refs related by obj->AssociatedClassReference[R417] where ( selected.rel_numb == ref.rel_numb );
      select any corresponding_basic_ref related by corresponding_refs->BasicReference[R420] where ( selected.phrase != phrase );
      if ( not_empty corresponding_basic_ref )
        corresponding_phrase = corresponding_basic_ref.phrase;
      end if;
    else
      is_formalizer = true;
      ::addStringToImports( file:file, s:"io.ciera.summit.exceptions.LinkException" );
      select many corresponding_refs related by obj->AssociatedClassReference[R417] where ( selected.rel_numb == ref.rel_numb );
      select any corresponding_basic_ref related by corresponding_refs->BasicReference[R420] where ( selected.phrase != phrase );
      select one corresponding_ref related by corresponding_basic_ref->AssociatedClassReference[R420];
      if ( empty corresponding_ref )
        select any corresponding_ref related by obj->AssociatedClassReference[R417] where ( selected.rel_numb == ref.rel_numb );
      end if;
      ref_name0 = STR::substr( s:corresponding_ref.name, begin:0, end:1 );
      ref_name1 = STR::substr( s:corresponding_ref.name, begin:1, end:-1 );
      capital_ref_name = T::c( s:ref_name0 ) + ref_name1;
      select one obj related by corresponding_ref->TypedObject[R406]->Type[R410]->Class[R412];
      select one builtin related by corresponding_ref->TypedObject[R406]->Type[R410]->BuiltInType[R412];
      corresponding_is_many = false;
      if ( ( not_empty builtin and builtin.instset ) or ( empty obj and empty builtin ) )
        corresponding_is_many = true;
      end if;
    end if;
    T::b( s:separator );
    T::include( file:"java/t.relate.java" );
    empty_relates_block = empty_relates_block + T::body();
    T::clear();
    T::b( s:separator );
    T::include( file:"java/t.unrelate.java" );
    empty_unrelates_block = empty_unrelates_block + T::body();
    T::clear();
    separator = "\n";
  end if;
end for;

import_block = file.getFormattedImports();

T::include( file:"java/t.class.java" );',
	1,
	'',
	"00000000-0000-0000-0000-000000000000",
	0);
INSERT INTO O_NBATTR
	VALUES ("d7ba797f-6eeb-433d-8abc-d71aaa0ae6da",
	"1dbec688-8d2c-4cd4-a8b4-27bf3ccaa1fd");
INSERT INTO O_BATTR
	VALUES ("d7ba797f-6eeb-433d-8abc-d71aaa0ae6da",
	"1dbec688-8d2c-4cd4-a8b4-27bf3ccaa1fd");
INSERT INTO O_ATTR
	VALUES ("d7ba797f-6eeb-433d-8abc-d71aaa0ae6da",
	"1dbec688-8d2c-4cd4-a8b4-27bf3ccaa1fd",
	"4e720386-2338-4c2e-bfab-7370b470cf09",
	'key_letters',
	'',
	'',
	'key_letters',
	0,
	"ba5eda7a-def5-0000-0000-000000000004",
	'',
	'');
INSERT INTO O_NBATTR
	VALUES ("4472ef76-5f6e-4657-b6d5-7465c139e8f0",
	"1dbec688-8d2c-4cd4-a8b4-27bf3ccaa1fd");
INSERT INTO O_BATTR
	VALUES ("4472ef76-5f6e-4657-b6d5-7465c139e8f0",
	"1dbec688-8d2c-4cd4-a8b4-27bf3ccaa1fd");
INSERT INTO O_ATTR
	VALUES ("4472ef76-5f6e-4657-b6d5-7465c139e8f0",
	"1dbec688-8d2c-4cd4-a8b4-27bf3ccaa1fd",
	"d7ba797f-6eeb-433d-8abc-d71aaa0ae6da",
	'number',
	'',
	'',
	'number',
	0,
	"ba5eda7a-def5-0000-0000-000000000002",
	'',
	'');
INSERT INTO O_REF
	VALUES ("1dbec688-8d2c-4cd4-a8b4-27bf3ccaa1fd",
	"cf3f6a66-3c80-4818-a5ad-6b491a84e448",
	0,
	"84875bfc-0aa6-4032-ab0e-b2162c106b46",
	"eee5aeb0-ff8c-4263-bfe6-fb49fee0c699",
	"7ecbd168-98dd-4d15-88ff-9676954cf8dd",
	"82e2dbe0-b31d-4651-94f5-2120070d69c2",
	"422e73f9-8fcb-4e0e-a9b3-4e2183b6cae8",
	"8b61c94c-fa8c-4e99-bfa4-2ab04819c376",
	"00000000-0000-0000-0000-000000000000",
	0,
	'',
	'File',
	'name',
	'R401');
INSERT INTO R_RGO_PROXY
	VALUES ("1dbec688-8d2c-4cd4-a8b4-27bf3ccaa1fd",
	"eee5aeb0-ff8c-4263-bfe6-fb49fee0c699",
	"7ecbd168-98dd-4d15-88ff-9676954cf8dd",
	'../architecture.xtuml');
INSERT INTO O_RTIDA_PROXY
	VALUES ("84875bfc-0aa6-4032-ab0e-b2162c106b46",
	"cf3f6a66-3c80-4818-a5ad-6b491a84e448",
	0,
	"eee5aeb0-ff8c-4263-bfe6-fb49fee0c699",
	"82e2dbe0-b31d-4651-94f5-2120070d69c2",
	'../architecture.xtuml');
INSERT INTO O_REF
	VALUES ("1dbec688-8d2c-4cd4-a8b4-27bf3ccaa1fd",
	"c82b12d2-5ff2-4a6a-90e9-f25c15b23917",
	0,
	"f4d4791a-d893-4daf-bfa4-5b7e21de6028",
	"9fd784f4-ea31-466d-87d8-b1b6d673af95",
	"307e0006-47fa-4657-b690-c2bf9e113a93",
	"d519c29d-3a31-4e21-97ce-9d7ddafa74e2",
	"422e73f9-8fcb-4e0e-a9b3-4e2183b6cae8",
	"31a8c301-fadb-437b-89a6-9a38271d03d1",
	"8b61c94c-fa8c-4e99-bfa4-2ab04819c376",
	0,
	'',
	'Type',
	'name',
	'R407');
INSERT INTO R_RGO_PROXY
	VALUES ("1dbec688-8d2c-4cd4-a8b4-27bf3ccaa1fd",
	"9fd784f4-ea31-466d-87d8-b1b6d673af95",
	"307e0006-47fa-4657-b690-c2bf9e113a93",
	'../architecture.xtuml');
INSERT INTO O_RTIDA_PROXY
	VALUES ("f4d4791a-d893-4daf-bfa4-5b7e21de6028",
	"c82b12d2-5ff2-4a6a-90e9-f25c15b23917",
	0,
	"9fd784f4-ea31-466d-87d8-b1b6d673af95",
	"d519c29d-3a31-4e21-97ce-9d7ddafa74e2",
	'../architecture.xtuml');
INSERT INTO O_RATTR
	VALUES ("422e73f9-8fcb-4e0e-a9b3-4e2183b6cae8",
	"1dbec688-8d2c-4cd4-a8b4-27bf3ccaa1fd",
	"84875bfc-0aa6-4032-ab0e-b2162c106b46",
	"cf3f6a66-3c80-4818-a5ad-6b491a84e448",
	1,
	'name');
INSERT INTO O_BATTR_PROXY
	VALUES ("84875bfc-0aa6-4032-ab0e-b2162c106b46",
	"cf3f6a66-3c80-4818-a5ad-6b491a84e448",
	'../File/File.xtuml');
INSERT INTO O_ATTR
	VALUES ("422e73f9-8fcb-4e0e-a9b3-4e2183b6cae8",
	"1dbec688-8d2c-4cd4-a8b4-27bf3ccaa1fd",
	"00000000-0000-0000-0000-000000000000",
	'name',
	'',
	'',
	'name',
	0,
	"ba5eda7a-def5-0000-0000-000000000007",
	'',
	'');
INSERT INTO O_REF
	VALUES ("1dbec688-8d2c-4cd4-a8b4-27bf3ccaa1fd",
	"cf3f6a66-3c80-4818-a5ad-6b491a84e448",
	0,
	"8fb8cbbf-8af1-4206-a2b0-a53023b8b11a",
	"eee5aeb0-ff8c-4263-bfe6-fb49fee0c699",
	"7ecbd168-98dd-4d15-88ff-9676954cf8dd",
	"82e2dbe0-b31d-4651-94f5-2120070d69c2",
	"4e720386-2338-4c2e-bfab-7370b470cf09",
	"f113c6ba-d03b-4a24-910f-9705645d5176",
	"00000000-0000-0000-0000-000000000000",
	0,
	'',
	'File',
	'package',
	'R401');
INSERT INTO O_RTIDA_PROXY
	VALUES ("8fb8cbbf-8af1-4206-a2b0-a53023b8b11a",
	"cf3f6a66-3c80-4818-a5ad-6b491a84e448",
	0,
	"eee5aeb0-ff8c-4263-bfe6-fb49fee0c699",
	"82e2dbe0-b31d-4651-94f5-2120070d69c2",
	'../architecture.xtuml');
INSERT INTO O_REF
	VALUES ("1dbec688-8d2c-4cd4-a8b4-27bf3ccaa1fd",
	"c82b12d2-5ff2-4a6a-90e9-f25c15b23917",
	0,
	"e2c1c2fc-01e4-4956-955f-134e936ecfe9",
	"9fd784f4-ea31-466d-87d8-b1b6d673af95",
	"307e0006-47fa-4657-b690-c2bf9e113a93",
	"d519c29d-3a31-4e21-97ce-9d7ddafa74e2",
	"4e720386-2338-4c2e-bfab-7370b470cf09",
	"946b6c4d-26d0-4740-acd2-de718742065e",
	"f113c6ba-d03b-4a24-910f-9705645d5176",
	0,
	'',
	'Type',
	'package',
	'R407');
INSERT INTO O_RTIDA_PROXY
	VALUES ("e2c1c2fc-01e4-4956-955f-134e936ecfe9",
	"c82b12d2-5ff2-4a6a-90e9-f25c15b23917",
	0,
	"9fd784f4-ea31-466d-87d8-b1b6d673af95",
	"d519c29d-3a31-4e21-97ce-9d7ddafa74e2",
	'../architecture.xtuml');
INSERT INTO O_RATTR
	VALUES ("4e720386-2338-4c2e-bfab-7370b470cf09",
	"1dbec688-8d2c-4cd4-a8b4-27bf3ccaa1fd",
	"8fb8cbbf-8af1-4206-a2b0-a53023b8b11a",
	"cf3f6a66-3c80-4818-a5ad-6b491a84e448",
	1,
	'package');
INSERT INTO O_BATTR_PROXY
	VALUES ("8fb8cbbf-8af1-4206-a2b0-a53023b8b11a",
	"cf3f6a66-3c80-4818-a5ad-6b491a84e448",
	'../File/File.xtuml');
INSERT INTO O_ATTR
	VALUES ("4e720386-2338-4c2e-bfab-7370b470cf09",
	"1dbec688-8d2c-4cd4-a8b4-27bf3ccaa1fd",
	"422e73f9-8fcb-4e0e-a9b3-4e2183b6cae8",
	'package',
	'',
	'',
	'path',
	0,
	"ba5eda7a-def5-0000-0000-000000000007",
	'',
	'');
INSERT INTO O_REF
	VALUES ("1dbec688-8d2c-4cd4-a8b4-27bf3ccaa1fd",
	"e545984c-062c-43fd-9deb-1a46d657e094",
	0,
	"ea0dd747-d248-44b6-ab1a-17d93b2032df",
	"80b8cf5a-0741-4071-bcb5-4ab9440ed077",
	"89090b20-af06-4080-8bdd-ab036625e038",
	"56480af2-8442-442f-99ec-b658b5d9aaf2",
	"2601c406-dfcc-4679-a52b-3b0f5c032f79",
	"03b19740-3c98-4081-b0c2-8870b9e622e4",
	"00000000-0000-0000-0000-000000000000",
	0,
	'',
	'Model Class',
	'Obj_ID',
	'R409.''is transformed from''');
INSERT INTO R_RGO_PROXY
	VALUES ("1dbec688-8d2c-4cd4-a8b4-27bf3ccaa1fd",
	"80b8cf5a-0741-4071-bcb5-4ab9440ed077",
	"89090b20-af06-4080-8bdd-ab036625e038",
	'../architecture.xtuml');
INSERT INTO O_RTIDA_PROXY
	VALUES ("ea0dd747-d248-44b6-ab1a-17d93b2032df",
	"e545984c-062c-43fd-9deb-1a46d657e094",
	0,
	"80b8cf5a-0741-4071-bcb5-4ab9440ed077",
	"56480af2-8442-442f-99ec-b658b5d9aaf2",
	'../architecture.xtuml');
INSERT INTO O_RATTR
	VALUES ("2601c406-dfcc-4679-a52b-3b0f5c032f79",
	"1dbec688-8d2c-4cd4-a8b4-27bf3ccaa1fd",
	"41dd50fe-c407-44c8-bb3d-913f6bb68dd0",
	"e7378c46-7ebc-4b9f-a934-91d48b1a4774",
	1,
	'Element_ID');
INSERT INTO O_BATTR_PROXY
	VALUES ("41dd50fe-c407-44c8-bb3d-913f6bb68dd0",
	"e7378c46-7ebc-4b9f-a934-91d48b1a4774",
	'../../../../../../mcooa/models/mcooa/ooaofooa/Packageable Element/Packageable Element/Packageable Element.xtuml');
INSERT INTO O_ATTR
	VALUES ("2601c406-dfcc-4679-a52b-3b0f5c032f79",
	"1dbec688-8d2c-4cd4-a8b4-27bf3ccaa1fd",
	"4472ef76-5f6e-4657-b6d5-7465c139e8f0",
	'Obj_ID',
	'',
	'',
	'Obj_ID',
	0,
	"ba5eda7a-def5-0000-0000-000000000007",
	'',
	'');
INSERT INTO O_ID
	VALUES (0,
	"1dbec688-8d2c-4cd4-a8b4-27bf3ccaa1fd");
INSERT INTO O_OIDA
	VALUES ("422e73f9-8fcb-4e0e-a9b3-4e2183b6cae8",
	"1dbec688-8d2c-4cd4-a8b4-27bf3ccaa1fd",
	0,
	'name');
INSERT INTO O_OIDA
	VALUES ("4e720386-2338-4c2e-bfab-7370b470cf09",
	"1dbec688-8d2c-4cd4-a8b4-27bf3ccaa1fd",
	0,
	'package');
INSERT INTO O_ID
	VALUES (1,
	"1dbec688-8d2c-4cd4-a8b4-27bf3ccaa1fd");
INSERT INTO O_ID
	VALUES (2,
	"1dbec688-8d2c-4cd4-a8b4-27bf3ccaa1fd");
INSERT INTO PE_PE
	VALUES ("1dbec688-8d2c-4cd4-a8b4-27bf3ccaa1fd",
	1,
	"73f28ea1-414d-499d-893f-5384c59bc0b2",
	"00000000-0000-0000-0000-000000000000",
	4);
INSERT INTO EP_PKG_PROXY
	VALUES ("73f28ea1-414d-499d-893f-5384c59bc0b2",
	"00000000-0000-0000-0000-000000000000",
	"aa743d3c-66dc-49df-a19a-ffbadf9c9d1b",
	'architecture',
	'',
	0,
	'../architecture.xtuml');
