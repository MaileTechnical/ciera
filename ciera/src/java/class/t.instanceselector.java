if ( multiplicity_many ) {
T_b("    ");
T_b("private ");
T_b(type_name);
T_b(" ");
T_b(self->name);
T_b("_set;");
T_b("\n");
T_b("    ");
T_b("@Override");
T_b("\n");
T_b("    ");
T_b("public void add");
T_b(self->name);
T_b("( ");
T_b(inst_type_name);
T_b(" inst ) {");
T_b("\n");
T_b("        ");
T_b(self->name);
T_b("_set.add(inst);");
T_b("\n");
T_b("    ");
T_b("}");
T_b("\n");
T_b("    ");
T_b("@Override");
T_b("\n");
T_b("    ");
T_b("public void remove");
T_b(self->name);
T_b("( ");
T_b(inst_type_name);
T_b(" inst ) {");
T_b("\n");
T_b("        ");
T_b(self->name);
T_b("_set.remove(inst);");
T_b("\n");
T_b("    ");
T_b("}");
T_b("\n");
} else {
T_b("    ");
T_b("private ");
T_b(type_name);
T_b(" ");
T_b(self->name);
T_b("_inst;");
T_b("\n");
T_b("    ");
T_b("@Override");
T_b("\n");
T_b("    ");
T_b("public void set");
T_b(self->name);
T_b("( ");
T_b(inst_type_name);
T_b(" inst ) {");
T_b("\n");
T_b("        ");
T_b(self->name);
T_b("_inst = inst;");
T_b("\n");
T_b("    ");
T_b("}");
T_b("\n");
}
T_b("    ");
T_b("@Override");
T_b("\n");
T_b("    ");
T_b("public ");
T_b(type_name);
T_b(" ");
T_b(self->name);
T_b("() throws XtumlException {");
T_b("\n");
if ( multiplicity_many ) {
T_b("        ");
T_b("return ");
T_b(self->name);
T_b("_set.toImmutableSet();");
T_b("\n");
} else {
T_b("        ");
T_b("return ");
T_b(self->name);
T_b("_inst;");
T_b("\n");
}
T_b("    ");
T_b("}");
T_b("\n");
