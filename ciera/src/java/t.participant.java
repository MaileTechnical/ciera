if ( is_many ) {
T_b("    ");
T_b("public void add");
T_b(capital_ref_name);
T_b("OnR");
T_b(rel_numb);
T_b("( ");
T_b(target_type_name);
T_b(" ");
T_b(inst_name);
T_b(" ) throws XtumlException {");
T_b("\n");
T_b("        ");
T_b("if ( !(");
T_b(ref_name);
T_b(".contains( ");
T_b(inst_name);
T_b(" )) ) ");
T_b(ref_name);
T_b(".add( ");
T_b(inst_name);
T_b(" );");
T_b("\n");
T_b("        ");
T_b("else throw new LinkException( \"Cannot link to already linked relationship.\" );");
T_b("\n");
T_b("    ");
T_b("}");
T_b("\n");
T_b("    ");
T_b("public void remove");
T_b(capital_ref_name);
T_b("OnR");
T_b(rel_numb);
T_b("( ");
T_b(target_type_name);
T_b(" ");
T_b(inst_name);
T_b(" ) throws XtumlException {");
T_b("\n");
T_b("        ");
T_b("if ( ");
T_b(ref_name);
T_b(".contains( ");
T_b(inst_name);
T_b(" ) ) ");
T_b(ref_name);
T_b(".remove( ");
T_b(inst_name);
T_b(" );");
T_b("\n");
T_b("        ");
T_b("else throw new LinkException( \"Cannot unlink non-linked relationship.\" );");
T_b("\n");
T_b("    ");
T_b("}");
T_b("\n");
} else {
T_b("    ");
T_b("public void set");
T_b(capital_ref_name);
T_b("OnR");
T_b(rel_numb);
T_b("( ");
T_b(target_type_name);
T_b(" ");
T_b(inst_name);
T_b(" ) throws XtumlException {");
T_b("\n");
T_b("        ");
T_b("if ( ");
T_b(ref_name);
T_b(" instanceof EmptyInstance ) ");
T_b(ref_name);
T_b(" = ");
T_b(inst_name);
T_b(";");
T_b("\n");
T_b("        ");
T_b("else throw new LinkException( \"Cannot link to already linked relationship.\" );");
T_b("\n");
T_b("    ");
T_b("}");
T_b("\n");
T_b("    ");
T_b("public void clear");
T_b(capital_ref_name);
T_b("OnR");
T_b(rel_numb);
T_b("() throws XtumlException {");
T_b("\n");
T_b("        ");
T_b("if ( !(");
T_b(ref_name);
T_b(" instanceof EmptyInstance) ) ");
T_b(ref_name);
T_b(" = ");
T_b(target_type_name);
T_b(".empty");
T_b(target_type_name);
T_b(";");
T_b("\n");
T_b("        ");
T_b("else throw new LinkException( \"Cannot unlink non-linked relationship.\" );");
T_b("\n");
T_b("    ");
T_b("}");
T_b("\n");
}
